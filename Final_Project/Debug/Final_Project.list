
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000541c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056dc  080056dc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080056e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  20000060  08005744  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b70  08005744  00024b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112a5  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a22  00000000  00000000  00031378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b26  00000000  00000000  00034c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035a3  00000000  00000000  0003574e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105b7  00000000  00000000  00038cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fe41  00000000  00000000  000492a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040b4  00000000  00000000  000d90ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000dd1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055a4 	.word	0x080055a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080055a4 	.word	0x080055a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <adc_init>:
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void adc_init()
{
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
	//__HAL_RCC_ADC_CLK_ENABLE();
	uint32_t* RCC_APB2ENR = (uint32_t*)(0x40023800 + 0x44);
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <adc_init+0x70>)
 8000594:	617b      	str	r3, [r7, #20]
	*RCC_APB2ENR |= (1 << 8);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	601a      	str	r2, [r3, #0]

	uint32_t* ADC_CCR = (uint32_t*)(0x40012000 + 0x300 + 0x04);
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <adc_init+0x74>)
 80005a4:	613b      	str	r3, [r7, #16]
	*ADC_CCR |= (1 << 23);
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	601a      	str	r2, [r3, #0]

	uint32_t* ADC_JSQR = (uint32_t*)(0x40012000 + 0x38);
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <adc_init+0x78>)
 80005b4:	60fb      	str	r3, [r7, #12]
	*ADC_JSQR &= ~(0b11 << 20); //1 conversion
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	601a      	str	r2, [r3, #0]
	*ADC_JSQR |= (16 << 15);    //select channel 16 (temp sensor) to measure
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	601a      	str	r2, [r3, #0]

	uint32_t* ADC_CR2 = (uint32_t*)(0x40012000 + 0x08);
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <adc_init+0x7c>)
 80005d0:	60bb      	str	r3, [r7, #8]
	*ADC_CR2 |= (1 << 0);
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f043 0201 	orr.w	r2, r3, #1
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	601a      	str	r2, [r3, #0]

	uint32_t* ADC_SMPR1 = (uint32_t*)(0x40012000 + 0x0C);
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <adc_init+0x80>)
 80005e0:	607b      	str	r3, [r7, #4]
	*ADC_SMPR1 |= (0b111 << 18); //select sample time for channel 16 is 480 cycles
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f443 12e0 	orr.w	r2, r3, #1835008	; 0x1c0000
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	371c      	adds	r7, #28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023844 	.word	0x40023844
 8000600:	40012304 	.word	0x40012304
 8000604:	40012038 	.word	0x40012038
 8000608:	40012008 	.word	0x40012008
 800060c:	4001200c 	.word	0x4001200c

08000610 <adc_measure_vin>:

int adc_measure_vin()
{
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
	uint32_t* ADC_CR2 = (uint32_t*)(0x40012000 + 0x08);
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <adc_measure_vin+0x74>)
 8000618:	617b      	str	r3, [r7, #20]
	*ADC_CR2 |= (1 << 22); //start injected conversion
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	601a      	str	r2, [r3, #0]

	uint32_t* ADC_SR = (uint32_t*)(0x40012000 + 0x00);
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <adc_measure_vin+0x78>)
 8000628:	613b      	str	r3, [r7, #16]
	while(((*ADC_SR >> 2) &1 ) !=1); //wait until injected conversion complete
 800062a:	bf00      	nop
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0f9      	beq.n	800062c <adc_measure_vin+0x1c>

	uint32_t* ADC_JDR1 = (uint32_t*)(0x40012000 + 0x3C);
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <adc_measure_vin+0x7c>)
 800063a:	60fb      	str	r3, [r7, #12]
	uint16_t Dr = *ADC_JDR1 & 0Xfff;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000646:	817b      	strh	r3, [r7, #10]
	float Vin = (Dr * 3000)/4095;
 8000648:	897b      	ldrh	r3, [r7, #10]
 800064a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800064e:	fb02 f303 	mul.w	r3, r2, r3
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <adc_measure_vin+0x80>)
 8000654:	fb82 1203 	smull	r1, r2, r2, r3
 8000658:	441a      	add	r2, r3
 800065a:	12d2      	asrs	r2, r2, #11
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000668:	edc7 7a01 	vstr	s15, [r7, #4]
	return Vin;
 800066c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000674:	ee17 3a90 	vmov	r3, s15
}
 8000678:	4618      	mov	r0, r3
 800067a:	371c      	adds	r7, #28
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40012008 	.word	0x40012008
 8000688:	40012000 	.word	0x40012000
 800068c:	4001203c 	.word	0x4001203c
 8000690:	80080081 	.word	0x80080081

08000694 <adc_get_temp_C>:
uint8_t temperature; // degree C
uint8_t temperature1;


int adc_get_temp_C()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
	int Vsense = adc_measure_vin();
 800069a:	f7ff ffb9 	bl	8000610 <adc_measure_vin>
 800069e:	6178      	str	r0, [r7, #20]
	int V25 = 760;
 80006a0:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80006a4:	613b      	str	r3, [r7, #16]
	float AVG_slope = 2.5;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <adc_get_temp_C+0x50>)
 80006a8:	60fb      	str	r3, [r7, #12]
	temperature = ((Vsense - V25)/AVG_slope) +25;
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80006bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006c0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80006c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80006d0:	793b      	ldrb	r3, [r7, #4]
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <adc_get_temp_C+0x54>)
 80006d6:	701a      	strb	r2, [r3, #0]
	return temperature;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <adc_get_temp_C+0x54>)
 80006da:	781b      	ldrb	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40200000 	.word	0x40200000
 80006e8:	2000007c 	.word	0x2000007c

080006ec <adc_get_temp_H>:
int adc_get_temp_H()
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	temperature1 = (9 * temperature)/5 + 32; // degree F
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <adc_get_temp_H+0x34>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4613      	mov	r3, r2
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	4413      	add	r3, r2
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <adc_get_temp_H+0x38>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1052      	asrs	r2, r2, #1
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	3320      	adds	r3, #32
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <adc_get_temp_H+0x3c>)
 8000710:	701a      	strb	r2, [r3, #0]
	return temperature1;
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <adc_get_temp_H+0x3c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
}
 8000716:	4618      	mov	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	2000007c 	.word	0x2000007c
 8000724:	66666667 	.word	0x66666667
 8000728:	2000007d 	.word	0x2000007d

0800072c <UART_send_1_byte>:
    *USART1_CR1 &= ~(1 << 9);
    *USART1_CR1 |= (1 << 13)|(1 << 3)|(1 << 2);// Enable UART, Tx và Rx
}

void UART_send_1_byte(char data)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
    uint32_t* USART1_DR  = (uint32_t*)(0x40011000 + 0x04);
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <UART_send_1_byte+0x44>)
 8000738:	60fb      	str	r3, [r7, #12]
    uint32_t* USART1_SR  = (uint32_t*)(0x40011000 + 0x00);
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <UART_send_1_byte+0x48>)
 800073c:	60bb      	str	r3, [r7, #8]

    while(((*USART1_SR >> 7) &1) !=1); //7: Transmit data register empty
 800073e:	bf00      	nop
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f9      	beq.n	8000740 <UART_send_1_byte+0x14>
    *USART1_DR = data;
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	601a      	str	r2, [r3, #0]
    while(((*USART1_SR >> 6) &1) !=1); //6: Transmission complete
 8000752:	bf00      	nop
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <UART_send_1_byte+0x28>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40011004 	.word	0x40011004
 8000774:	40011000 	.word	0x40011000

08000778 <printlog>:

	return data;
}

void printlog(char* format, ...)
{
 8000778:	b40f      	push	{r0, r1, r2, r3}
 800077a:	b580      	push	{r7, lr}
 800077c:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000780:	af00      	add	r7, sp, #0
	char buf[1024] = {0};
 8000782:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000786:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	3304      	adds	r3, #4
 8000790:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fa80 	bl	8004c9c <memset>
	int buf_len =0;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	va_list ap;
	va_start (ap, format);
 80007a2:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80007a6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80007aa:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80007ae:	601a      	str	r2, [r3, #0]
	vsprintf(buf, format, ap);
 80007b0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80007b4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80007b8:	f107 0008 	add.w	r0, r7, #8
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 80007c2:	f004 fa61 	bl	8004c88 <vsiprintf>
	va_end(ap);
	buf_len = strlen(buf);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd08 	bl	80001e0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	for(int i=0; i < buf_len; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80007dc:	e00f      	b.n	80007fe <printlog+0x86>
	{
		UART_send_1_byte(buf[i]);
 80007de:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80007e2:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80007e6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80007ea:	4413      	add	r3, r2
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff9c 	bl	800072c <UART_send_1_byte>
	for(int i=0; i < buf_len; i++)
 80007f4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80007f8:	3301      	adds	r3, #1
 80007fa:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80007fe:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000802:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000806:	429a      	cmp	r2, r3
 8000808:	dbe9      	blt.n	80007de <printlog+0x66>
	}
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000812:	46bd      	mov	sp, r7
 8000814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	adc_init();
 8000820:	f7ff feb4 	bl	800058c <adc_init>
	adc_measure_vin();
 8000824:	f7ff fef4 	bl	8000610 <adc_measure_vin>
	adc_get_temp_C();
 8000828:	f7ff ff34 	bl	8000694 <adc_get_temp_C>
	adc_get_temp_H();
 800082c:	f7ff ff5e 	bl	80006ec <adc_get_temp_H>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fa7c 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f834 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f8ba 	bl	80009b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800083c:	f000 f88e 	bl	800095c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000840:	f001 fcb8 	bl	80021b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <main+0x60>)
 8000846:	2100      	movs	r1, #0
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <main+0x64>)
 800084a:	f001 fcfd 	bl	8002248 <osThreadNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <main+0x68>)
 8000852:	6013      	str	r3, [r2, #0]

  /* creation of Blinking_LED */
  Blinking_LEDHandle = osThreadNew(Function1, NULL, &Blinking_LED_attributes);
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <main+0x6c>)
 8000856:	2100      	movs	r1, #0
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <main+0x70>)
 800085a:	f001 fcf5 	bl	8002248 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <main+0x74>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of UART */
  UARTHandle = osThreadNew(Function2, NULL, &UART_attributes);
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <main+0x78>)
 8000866:	2100      	movs	r1, #0
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <main+0x7c>)
 800086a:	f001 fced 	bl	8002248 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <main+0x80>)
 8000872:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000874:	f001 fcc2 	bl	80021fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x5c>
 800087a:	bf00      	nop
 800087c:	0800561c 	.word	0x0800561c
 8000880:	08000a55 	.word	0x08000a55
 8000884:	200000c4 	.word	0x200000c4
 8000888:	08005640 	.word	0x08005640
 800088c:	08000a8d 	.word	0x08000a8d
 8000890:	200000c8 	.word	0x200000c8
 8000894:	08005664 	.word	0x08005664
 8000898:	08000ac5 	.word	0x08000ac5
 800089c:	200000cc 	.word	0x200000cc

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	; 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2230      	movs	r2, #48	; 0x30
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 f9f4 	bl	8004c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <SystemClock_Config+0xb4>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xb4>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xb4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <SystemClock_Config+0xb8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <SystemClock_Config+0xb8>)
 80008ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <SystemClock_Config+0xb8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2310      	movs	r3, #16
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fd01 	bl	8001318 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800091c:	f000 f8f6 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f000 ff64 	bl	8001808 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000946:	f000 f8e1 	bl	8000b0c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART1_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000994:	f001 f918 	bl	8001bc8 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f8b5 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000080 	.word	0x20000080
 80009ac:	40011000 	.word	0x40011000

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_GPIO_Init+0x9c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_GPIO_Init+0x9c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <MX_GPIO_Init+0x9c>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_GPIO_Init+0x9c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <MX_GPIO_Init+0xa0>)
 8000a22:	f000 fc5f 	bl	80012e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0xa0>)
 8000a40:	f000 facc 	bl	8000fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a62:	4809      	ldr	r0, [pc, #36]	; (8000a88 <StartDefaultTask+0x34>)
 8000a64:	f000 fc3e 	bl	80012e4 <HAL_GPIO_WritePin>
	  osDelay(1500);
 8000a68:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a6c:	f001 fc7e 	bl	800236c <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <StartDefaultTask+0x34>)
 8000a78:	f000 fc34 	bl	80012e4 <HAL_GPIO_WritePin>
	  osDelay(1500);
 8000a7c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a80:	f001 fc74 	bl	800236c <osDelay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a84:	e7ea      	b.n	8000a5c <StartDefaultTask+0x8>
 8000a86:	bf00      	nop
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <Function1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Function1 */
void Function1(void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function1 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <Function1+0x34>)
 8000a9c:	f000 fc22 	bl	80012e4 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa4:	f001 fc62 	bl	800236c <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <Function1+0x34>)
 8000ab0:	f000 fc18 	bl	80012e4 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f001 fc58 	bl	800236c <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000abc:	e7ea      	b.n	8000a94 <Function1+0x8>
 8000abe:	bf00      	nop
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <Function2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Function2 */
void Function2(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function2 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout);
	for(int j=0; j<100000; j++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e00f      	b.n	8000af2 <Function2+0x2e>
	{
		printlog("%d. Temp = %d deg C and %d deg H \r\n", j, temperature, temperature1);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <Function2+0x38>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <Function2+0x3c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	68f9      	ldr	r1, [r7, #12]
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <Function2+0x40>)
 8000ae0:	f7ff fe4a 	bl	8000778 <printlog>
		osDelay(3000);
 8000ae4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ae8:	f001 fc40 	bl	800236c <osDelay>
	for(int j=0; j<100000; j++)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <Function2+0x44>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	ddeb      	ble.n	8000ad2 <Function2+0xe>
 8000afa:	e7e7      	b.n	8000acc <Function2+0x8>
 8000afc:	2000007c 	.word	0x2000007c
 8000b00:	2000007d 	.word	0x2000007d
 8000b04:	080055e0 	.word	0x080055e0
 8000b08:	0001869f 	.word	0x0001869f

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_MspInit+0x54>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <HAL_MspInit+0x54>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x54>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_MspInit+0x54>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_MspInit+0x54>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_MspInit+0x54>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f000 fa14 	bl	8000f8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0x84>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12b      	bne.n	8000bea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bca:	23c0      	movs	r3, #192	; 0xc0
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <HAL_UART_MspInit+0x8c>)
 8000be6:	f000 f9f9 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	; 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f8ce 	bl	8000dd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c34:	f002 ffa8 	bl	8003b88 <xTaskGetSchedulerState>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d001      	beq.n	8000c42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c3e:	f003 fd93 	bl	8004768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f004 f818 	bl	8004cac <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20020000 	.word	0x20020000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	200000d0 	.word	0x200000d0
 8000cb0:	20004b70 	.word	0x20004b70

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ffd7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 ffd7 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fd87 	bl	800081c <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d1c:	080056e4 	.word	0x080056e4
  ldr r2, =_sbss
 8000d20:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d24:	20004b70 	.word	0x20004b70

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f90d 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff feda 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f917 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f8ed 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200000d4 	.word	0x200000d4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200000d4 	.word	0x200000d4

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e159      	b.n	80012ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8148 	bne.w	80012a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80a2 	beq.w	80012a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b57      	ldr	r3, [pc, #348]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a56      	ldr	r2, [pc, #344]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a49      	ldr	r2, [pc, #292]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x202>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x1fe>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a47      	ldr	r2, [pc, #284]	; (80012d4 <HAL_GPIO_Init+0x2f8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a46      	ldr	r2, [pc, #280]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x1f6>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a45      	ldr	r2, [pc, #276]	; (80012dc <HAL_GPIO_Init+0x300>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x1f2>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x204>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_GPIO_Init+0x304>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <HAL_GPIO_Init+0x304>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_GPIO_Init+0x304>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a24      	ldr	r2, [pc, #144]	; (80012e0 <HAL_GPIO_Init+0x304>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_GPIO_Init+0x304>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_GPIO_Init+0x304>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f aea2 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e267      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d075      	beq.n	8001422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b04      	cmp	r3, #4
 8001340:	d00c      	beq.n	800135c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001342:	4b85      	ldr	r3, [pc, #532]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134a:	2b08      	cmp	r3, #8
 800134c:	d112      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134e:	4b82      	ldr	r3, [pc, #520]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800135a:	d10b      	bne.n	8001374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	4b7e      	ldr	r3, [pc, #504]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d05b      	beq.n	8001420 <HAL_RCC_OscConfig+0x108>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d157      	bne.n	8001420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e242      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d106      	bne.n	800138c <HAL_RCC_OscConfig+0x74>
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a75      	ldr	r2, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6f      	ldr	r2, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xb0>
 80013b0:	4b69      	ldr	r3, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a68      	ldr	r2, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fd12 	bl	8000df8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fd0e 	bl	8000df8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e207      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xc0>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcfe 	bl	8000df8 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fcfa 	bl	8000df8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1f3      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b51      	ldr	r3, [pc, #324]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0xe8>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	4b4a      	ldr	r3, [pc, #296]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143a:	4b47      	ldr	r3, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c7      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4937      	ldr	r1, [pc, #220]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_RCC_OscConfig+0x244>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fcb3 	bl	8000df8 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fcaf 	bl	8000df8 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a8      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4925      	ldr	r1, [pc, #148]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_OscConfig+0x244>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc92 	bl	8000df8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc8e 	bl	8000df8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e187      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_RCC_OscConfig+0x248>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff fc72 	bl	8000df8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fc6e 	bl	8000df8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e167      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x240>)
 800152c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x200>
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_OscConfig+0x248>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fc5b 	bl	8000df8 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	e00e      	b.n	8001564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff fc57 	bl	8000df8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d907      	bls.n	8001564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e150      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000
 8001560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8097 	beq.w	80016ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a7c      	ldr	r2, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b77      	ldr	r3, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ba:	4b74      	ldr	r3, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a73      	ldr	r2, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fc17 	bl	8000df8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ce:	f7ff fc13 	bl	8000df8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e10c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x474>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x2ea>
 80015f4:	4b64      	ldr	r3, [pc, #400]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a63      	ldr	r2, [pc, #396]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	e01c      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d10c      	bne.n	8001624 <HAL_RCC_OscConfig+0x30c>
 800160a:	4b5f      	ldr	r3, [pc, #380]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160e:	4a5e      	ldr	r2, [pc, #376]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6713      	str	r3, [r2, #112]	; 0x70
 8001616:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	4a5b      	ldr	r2, [pc, #364]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6713      	str	r3, [r2, #112]	; 0x70
 8001622:	e00b      	b.n	800163c <HAL_RCC_OscConfig+0x324>
 8001624:	4b58      	ldr	r3, [pc, #352]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a57      	ldr	r2, [pc, #348]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	4a54      	ldr	r2, [pc, #336]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d015      	beq.n	8001670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fbd8 	bl	8000df8 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fbd4 	bl	8000df8 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0cb      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	4b49      	ldr	r3, [pc, #292]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ee      	beq.n	800164c <HAL_RCC_OscConfig+0x334>
 800166e:	e014      	b.n	800169a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001670:	f7ff fbc2 	bl	8000df8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff fbbe 	bl	8000df8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0b5      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d105      	bne.n	80016ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a38      	ldr	r2, [pc, #224]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a1 	beq.w	80017f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d05c      	beq.n	800177c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d141      	bne.n	800174e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb92 	bl	8000df8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fb8e 	bl	8000df8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e087      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fb67 	bl	8000df8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb63 	bl	8000df8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e05c      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x416>
 800174c:	e054      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb50 	bl	8000df8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb4c 	bl	8000df8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e045      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
 800177a:	e03d      	b.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e038      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000
 8001790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x4ec>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d028      	beq.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d121      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d11a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017c4:	4013      	ands	r3, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0cc      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d90c      	bls.n	8001844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0b8      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	494d      	ldr	r1, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d044      	beq.n	8001928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e07f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e067      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 0203 	bic.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fa7e 	bl	8000df8 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7ff fa7a 	bl	8000df8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e04f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 020c 	and.w	r2, r3, #12
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	429a      	cmp	r2, r3
 8001926:	d1eb      	bne.n	8001900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e032      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4916      	ldr	r1, [pc, #88]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	490e      	ldr	r1, [pc, #56]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800198e:	f000 f821 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001992:	4602      	mov	r2, r0
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	5ccb      	ldrb	r3, [r1, r3]
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f9de 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	08005688 	.word	0x08005688
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b090      	sub	sp, #64	; 0x40
 80019da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ec:	4b59      	ldr	r3, [pc, #356]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d00d      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x40>
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	f200 80a1 	bhi.w	8001b40 <HAL_RCC_GetSysClockFreq+0x16c>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x34>
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a06:	e09b      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a0c:	e09b      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0e:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a12:	e098      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a14:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1e:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d028      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	627a      	str	r2, [r7, #36]	; 0x24
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a40:	fb03 f201 	mul.w	r2, r3, r1
 8001a44:	2300      	movs	r3, #0
 8001a46:	fb00 f303 	mul.w	r3, r0, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a4e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a54:	460a      	mov	r2, r1
 8001a56:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5a:	4413      	add	r3, r2
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	2200      	movs	r2, #0
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	61fa      	str	r2, [r7, #28]
 8001a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6e:	f7fe fc0f 	bl	8000290 <__aeabi_uldivmod>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4613      	mov	r3, r2
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a7a:	e053      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7c:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	2200      	movs	r2, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	617a      	str	r2, [r7, #20]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a8e:	f04f 0b00 	mov.w	fp, #0
 8001a92:	4652      	mov	r2, sl
 8001a94:	465b      	mov	r3, fp
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	0159      	lsls	r1, r3, #5
 8001aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa4:	0150      	lsls	r0, r2, #5
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	ebb2 080a 	subs.w	r8, r2, sl
 8001aae:	eb63 090b 	sbc.w	r9, r3, fp
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001abe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ac2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ac6:	ebb2 0408 	subs.w	r4, r2, r8
 8001aca:	eb63 0509 	sbc.w	r5, r3, r9
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	00eb      	lsls	r3, r5, #3
 8001ad8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001adc:	00e2      	lsls	r2, r4, #3
 8001ade:	4614      	mov	r4, r2
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	eb14 030a 	adds.w	r3, r4, sl
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	eb45 030b 	adc.w	r3, r5, fp
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001afa:	4629      	mov	r1, r5
 8001afc:	028b      	lsls	r3, r1, #10
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b04:	4621      	mov	r1, r4
 8001b06:	028a      	lsls	r2, r1, #10
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	60fa      	str	r2, [r7, #12]
 8001b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b18:	f7fe fbba 	bl	8000290 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3740      	adds	r7, #64	; 0x40
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	017d7840 	.word	0x017d7840

08001b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0a9b      	lsrs	r3, r3, #10
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08005698 	.word	0x08005698

08001ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ba4:	f7ff ffdc 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	0b5b      	lsrs	r3, r3, #13
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	4903      	ldr	r1, [pc, #12]	; (8001bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08005698 	.word	0x08005698

08001bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e03f      	b.n	8001c5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe ffbe 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f829 	bl	8001c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c68:	b0c0      	sub	sp, #256	; 0x100
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c80:	68d9      	ldr	r1, [r3, #12]
 8001c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	ea40 0301 	orr.w	r3, r0, r1
 8001c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001cbc:	f021 010c 	bic.w	r1, r1, #12
 8001cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cde:	6999      	ldr	r1, [r3, #24]
 8001ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	ea40 0301 	orr.w	r3, r0, r1
 8001cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <UART_SetConfig+0x2cc>)
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d005      	beq.n	8001d04 <UART_SetConfig+0xa0>
 8001cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	; (8001f34 <UART_SetConfig+0x2d0>)
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d104      	bne.n	8001d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d04:	f7ff ff4c 	bl	8001ba0 <HAL_RCC_GetPCLK2Freq>
 8001d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d0c:	e003      	b.n	8001d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d0e:	f7ff ff33 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8001d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d20:	f040 810c 	bne.w	8001f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d36:	4622      	mov	r2, r4
 8001d38:	462b      	mov	r3, r5
 8001d3a:	1891      	adds	r1, r2, r2
 8001d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d3e:	415b      	adcs	r3, r3
 8001d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d46:	4621      	mov	r1, r4
 8001d48:	eb12 0801 	adds.w	r8, r2, r1
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	eb43 0901 	adc.w	r9, r3, r1
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d66:	4690      	mov	r8, r2
 8001d68:	4699      	mov	r9, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	eb18 0303 	adds.w	r3, r8, r3
 8001d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d74:	462b      	mov	r3, r5
 8001d76:	eb49 0303 	adc.w	r3, r9, r3
 8001d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d92:	460b      	mov	r3, r1
 8001d94:	18db      	adds	r3, r3, r3
 8001d96:	653b      	str	r3, [r7, #80]	; 0x50
 8001d98:	4613      	mov	r3, r2
 8001d9a:	eb42 0303 	adc.w	r3, r2, r3
 8001d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8001da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001da8:	f7fe fa72 	bl	8000290 <__aeabi_uldivmod>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <UART_SetConfig+0x2d4>)
 8001db2:	fba3 2302 	umull	r2, r3, r3, r2
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	011c      	lsls	r4, r3, #4
 8001dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001dcc:	4642      	mov	r2, r8
 8001dce:	464b      	mov	r3, r9
 8001dd0:	1891      	adds	r1, r2, r2
 8001dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001dd4:	415b      	adcs	r3, r3
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ddc:	4641      	mov	r1, r8
 8001dde:	eb12 0a01 	adds.w	sl, r2, r1
 8001de2:	4649      	mov	r1, r9
 8001de4:	eb43 0b01 	adc.w	fp, r3, r1
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dfc:	4692      	mov	sl, r2
 8001dfe:	469b      	mov	fp, r3
 8001e00:	4643      	mov	r3, r8
 8001e02:	eb1a 0303 	adds.w	r3, sl, r3
 8001e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	18db      	adds	r3, r3, r3
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e2e:	4613      	mov	r3, r2
 8001e30:	eb42 0303 	adc.w	r3, r2, r3
 8001e34:	647b      	str	r3, [r7, #68]	; 0x44
 8001e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e3e:	f7fe fa27 	bl	8000290 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <UART_SetConfig+0x2d4>)
 8001e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2264      	movs	r2, #100	; 0x64
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	1acb      	subs	r3, r1, r3
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <UART_SetConfig+0x2d4>)
 8001e60:	fba3 2302 	umull	r2, r3, r3, r2
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e6c:	441c      	add	r4, r3
 8001e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e72:	2200      	movs	r2, #0
 8001e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e80:	4642      	mov	r2, r8
 8001e82:	464b      	mov	r3, r9
 8001e84:	1891      	adds	r1, r2, r2
 8001e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e88:	415b      	adcs	r3, r3
 8001e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e90:	4641      	mov	r1, r8
 8001e92:	1851      	adds	r1, r2, r1
 8001e94:	6339      	str	r1, [r7, #48]	; 0x30
 8001e96:	4649      	mov	r1, r9
 8001e98:	414b      	adcs	r3, r1
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	00cb      	lsls	r3, r1, #3
 8001eac:	4651      	mov	r1, sl
 8001eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	00ca      	lsls	r2, r1, #3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	189b      	adds	r3, r3, r2
 8001ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	460a      	mov	r2, r1
 8001ec8:	eb42 0303 	adc.w	r3, r2, r3
 8001ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	18db      	adds	r3, r3, r3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eea:	4613      	mov	r3, r2
 8001eec:	eb42 0303 	adc.w	r3, r2, r3
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001efa:	f7fe f9c9 	bl	8000290 <__aeabi_uldivmod>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <UART_SetConfig+0x2d4>)
 8001f04:	fba3 1302 	umull	r1, r3, r3, r2
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	2164      	movs	r1, #100	; 0x64
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	3332      	adds	r3, #50	; 0x32
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <UART_SetConfig+0x2d4>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	f003 0207 	and.w	r2, r3, #7
 8001f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4422      	add	r2, r4
 8001f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f2c:	e106      	b.n	800213c <UART_SetConfig+0x4d8>
 8001f2e:	bf00      	nop
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f40:	2200      	movs	r2, #0
 8001f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f4e:	4642      	mov	r2, r8
 8001f50:	464b      	mov	r3, r9
 8001f52:	1891      	adds	r1, r2, r2
 8001f54:	6239      	str	r1, [r7, #32]
 8001f56:	415b      	adcs	r3, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f5e:	4641      	mov	r1, r8
 8001f60:	1854      	adds	r4, r2, r1
 8001f62:	4649      	mov	r1, r9
 8001f64:	eb43 0501 	adc.w	r5, r3, r1
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	00eb      	lsls	r3, r5, #3
 8001f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f76:	00e2      	lsls	r2, r4, #3
 8001f78:	4614      	mov	r4, r2
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	18e3      	adds	r3, r4, r3
 8001f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f84:	464b      	mov	r3, r9
 8001f86:	eb45 0303 	adc.w	r3, r5, r3
 8001f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001faa:	4629      	mov	r1, r5
 8001fac:	008b      	lsls	r3, r1, #2
 8001fae:	4621      	mov	r1, r4
 8001fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	008a      	lsls	r2, r1, #2
 8001fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001fbc:	f7fe f968 	bl	8000290 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <UART_SetConfig+0x4e4>)
 8001fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	011c      	lsls	r4, r3, #4
 8001fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	1891      	adds	r1, r2, r2
 8001fe6:	61b9      	str	r1, [r7, #24]
 8001fe8:	415b      	adcs	r3, r3
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	1851      	adds	r1, r2, r1
 8001ff4:	6139      	str	r1, [r7, #16]
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	414b      	adcs	r3, r1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002008:	4659      	mov	r1, fp
 800200a:	00cb      	lsls	r3, r1, #3
 800200c:	4651      	mov	r1, sl
 800200e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002012:	4651      	mov	r1, sl
 8002014:	00ca      	lsls	r2, r1, #3
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	4603      	mov	r3, r0
 800201c:	4642      	mov	r2, r8
 800201e:	189b      	adds	r3, r3, r2
 8002020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002024:	464b      	mov	r3, r9
 8002026:	460a      	mov	r2, r1
 8002028:	eb42 0303 	adc.w	r3, r2, r3
 800202c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	67bb      	str	r3, [r7, #120]	; 0x78
 800203a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002048:	4649      	mov	r1, r9
 800204a:	008b      	lsls	r3, r1, #2
 800204c:	4641      	mov	r1, r8
 800204e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002052:	4641      	mov	r1, r8
 8002054:	008a      	lsls	r2, r1, #2
 8002056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800205a:	f7fe f919 	bl	8000290 <__aeabi_uldivmod>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4611      	mov	r1, r2
 8002064:	4b38      	ldr	r3, [pc, #224]	; (8002148 <UART_SetConfig+0x4e4>)
 8002066:	fba3 2301 	umull	r2, r3, r3, r1
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2264      	movs	r2, #100	; 0x64
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	1acb      	subs	r3, r1, r3
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	3332      	adds	r3, #50	; 0x32
 8002078:	4a33      	ldr	r2, [pc, #204]	; (8002148 <UART_SetConfig+0x4e4>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002084:	441c      	add	r4, r3
 8002086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800208a:	2200      	movs	r2, #0
 800208c:	673b      	str	r3, [r7, #112]	; 0x70
 800208e:	677a      	str	r2, [r7, #116]	; 0x74
 8002090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002094:	4642      	mov	r2, r8
 8002096:	464b      	mov	r3, r9
 8002098:	1891      	adds	r1, r2, r2
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	415b      	adcs	r3, r3
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020a4:	4641      	mov	r1, r8
 80020a6:	1851      	adds	r1, r2, r1
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	4649      	mov	r1, r9
 80020ac:	414b      	adcs	r3, r1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020bc:	4659      	mov	r1, fp
 80020be:	00cb      	lsls	r3, r1, #3
 80020c0:	4651      	mov	r1, sl
 80020c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020c6:	4651      	mov	r1, sl
 80020c8:	00ca      	lsls	r2, r1, #3
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	4642      	mov	r2, r8
 80020d2:	189b      	adds	r3, r3, r2
 80020d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80020d6:	464b      	mov	r3, r9
 80020d8:	460a      	mov	r2, r1
 80020da:	eb42 0303 	adc.w	r3, r2, r3
 80020de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	663b      	str	r3, [r7, #96]	; 0x60
 80020ea:	667a      	str	r2, [r7, #100]	; 0x64
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80020f8:	4649      	mov	r1, r9
 80020fa:	008b      	lsls	r3, r1, #2
 80020fc:	4641      	mov	r1, r8
 80020fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002102:	4641      	mov	r1, r8
 8002104:	008a      	lsls	r2, r1, #2
 8002106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800210a:	f7fe f8c1 	bl	8000290 <__aeabi_uldivmod>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <UART_SetConfig+0x4e4>)
 8002114:	fba3 1302 	umull	r1, r3, r3, r2
 8002118:	095b      	lsrs	r3, r3, #5
 800211a:	2164      	movs	r1, #100	; 0x64
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	3332      	adds	r3, #50	; 0x32
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <UART_SetConfig+0x4e4>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	f003 020f 	and.w	r2, r3, #15
 8002132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4422      	add	r2, r4
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002142:	46bd      	mov	sp, r7
 8002144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002148:	51eb851f 	.word	0x51eb851f

0800214c <__NVIC_SetPriority>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80021a4:	2100      	movs	r1, #0
 80021a6:	f06f 0004 	mvn.w	r0, #4
 80021aa:	f7ff ffcf 	bl	800214c <__NVIC_SetPriority>
#endif
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ba:	f3ef 8305 	mrs	r3, IPSR
 80021be:	603b      	str	r3, [r7, #0]
  return(result);
 80021c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021c6:	f06f 0305 	mvn.w	r3, #5
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	e00c      	b.n	80021e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <osKernelInitialize+0x44>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <osKernelInitialize+0x44>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	e002      	b.n	80021e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200000d8 	.word	0x200000d8

080021fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002202:	f3ef 8305 	mrs	r3, IPSR
 8002206:	603b      	str	r3, [r7, #0]
  return(result);
 8002208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <osKernelStart+0x1a>
    stat = osErrorISR;
 800220e:	f06f 0305 	mvn.w	r3, #5
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	e010      	b.n	8002238 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <osKernelStart+0x48>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d109      	bne.n	8002232 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800221e:	f7ff ffbf 	bl	80021a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <osKernelStart+0x48>)
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002228:	f001 f866 	bl	80032f8 <vTaskStartScheduler>
      stat = osOK;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	e002      	b.n	8002238 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002238:	687b      	ldr	r3, [r7, #4]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200000d8 	.word	0x200000d8

08002248 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af04      	add	r7, sp, #16
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002258:	f3ef 8305 	mrs	r3, IPSR
 800225c:	617b      	str	r3, [r7, #20]
  return(result);
 800225e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002260:	2b00      	cmp	r3, #0
 8002262:	d17e      	bne.n	8002362 <osThreadNew+0x11a>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d07b      	beq.n	8002362 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800226e:	2318      	movs	r3, #24
 8002270:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d045      	beq.n	800230e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <osThreadNew+0x48>
        name = attr->name;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <osThreadNew+0x6e>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b38      	cmp	r3, #56	; 0x38
 80022a8:	d805      	bhi.n	80022b6 <osThreadNew+0x6e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <osThreadNew+0x72>
        return (NULL);
 80022b6:	2300      	movs	r3, #0
 80022b8:	e054      	b.n	8002364 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00e      	beq.n	80022f0 <osThreadNew+0xa8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b5b      	cmp	r3, #91	; 0x5b
 80022d8:	d90a      	bls.n	80022f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <osThreadNew+0xa8>
        mem = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e010      	b.n	8002312 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10c      	bne.n	8002312 <osThreadNew+0xca>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <osThreadNew+0xca>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <osThreadNew+0xca>
          mem = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	e001      	b.n	8002312 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d110      	bne.n	800233a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002320:	9202      	str	r2, [sp, #8]
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6a3a      	ldr	r2, [r7, #32]
 800232c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fe0c 	bl	8002f4c <xTaskCreateStatic>
 8002334:	4603      	mov	r3, r0
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e013      	b.n	8002362 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d110      	bne.n	8002362 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	b29a      	uxth	r2, r3
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fe57 	bl	8003006 <xTaskCreate>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <osThreadNew+0x11a>
            hTask = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002362:	693b      	ldr	r3, [r7, #16]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002374:	f3ef 8305 	mrs	r3, IPSR
 8002378:	60bb      	str	r3, [r7, #8]
  return(result);
 800237a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <osDelay+0x1c>
    stat = osErrorISR;
 8002380:	f06f 0305 	mvn.w	r3, #5
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e007      	b.n	8002398 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 ff7c 	bl	8003290 <vTaskDelay>
    }
  }

  return (stat);
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80023b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <vApplicationGetIdleTaskMemory+0x30>)
 80023ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200000dc 	.word	0x200000dc
 80023d4:	20000138 	.word	0x20000138

080023d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a07      	ldr	r2, [pc, #28]	; (8002404 <vApplicationGetTimerTaskMemory+0x2c>)
 80023e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <vApplicationGetTimerTaskMemory+0x30>)
 80023ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000338 	.word	0x20000338
 8002408:	20000394 	.word	0x20000394

0800240c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0208 	add.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f103 0208 	add.w	r2, r3, #8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0208 	add.w	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	601a      	str	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d103      	bne.n	80024ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e00c      	b.n	80024e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3308      	adds	r3, #8
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e002      	b.n	80024dc <vListInsert+0x2e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d2f6      	bcs.n	80024d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	601a      	str	r2, [r3, #0]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6852      	ldr	r2, [r2, #4]
 8002540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d103      	bne.n	8002554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800259e:	f002 f851 	bl	8004644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	441a      	add	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	3b01      	subs	r3, #1
 80025d0:	68f9      	ldr	r1, [r7, #12]
 80025d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	441a      	add	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d114      	bne.n	800261e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01a      	beq.n	8002632 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3310      	adds	r3, #16
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f903 	bl	800380c <xTaskRemoveFromEventList>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <xQueueGenericReset+0xcc>)
 800260e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	e009      	b.n	8002632 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3310      	adds	r3, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fef2 	bl	800240c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3324      	adds	r3, #36	; 0x24
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff feed 	bl	800240c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002632:	f002 f837 	bl	80046a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <xQueueGenericCreateStatic+0x52>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <xQueueGenericCreateStatic+0x56>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <xQueueGenericCreateStatic+0x58>
 800269a:	2300      	movs	r3, #0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	623b      	str	r3, [r7, #32]
}
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <xQueueGenericCreateStatic+0x7e>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <xQueueGenericCreateStatic+0x82>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <xQueueGenericCreateStatic+0x84>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	61fb      	str	r3, [r7, #28]
}
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026e2:	2350      	movs	r3, #80	; 0x50
 80026e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b50      	cmp	r3, #80	; 0x50
 80026ea:	d00a      	beq.n	8002702 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	61bb      	str	r3, [r7, #24]
}
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002702:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002716:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4613      	mov	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f805 	bl	8002734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800272c:	4618      	mov	r0, r3
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e002      	b.n	8002756 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002762:	2101      	movs	r1, #1
 8002764:	69b8      	ldr	r0, [r7, #24]
 8002766:	f7ff ff05 	bl	8002574 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <xQueueGenericSend+0x32>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <xQueueGenericSend+0x40>
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <xQueueGenericSend+0x44>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <xQueueGenericSend+0x46>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <xQueueGenericSend+0x60>
	__asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d103      	bne.n	80027ea <xQueueGenericSend+0x6e>
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <xQueueGenericSend+0x72>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <xQueueGenericSend+0x74>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <xQueueGenericSend+0x8e>
	__asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	623b      	str	r3, [r7, #32]
}
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800280a:	f001 f9bd 	bl	8003b88 <xTaskGetSchedulerState>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <xQueueGenericSend+0x9e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <xQueueGenericSend+0xa2>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <xQueueGenericSend+0xa4>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xQueueGenericSend+0xbe>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	61fb      	str	r3, [r7, #28]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800283a:	f001 ff03 	bl	8004644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <xQueueGenericSend+0xd4>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d129      	bne.n	80028a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002856:	f000 fa0b 	bl	8002c70 <prvCopyDataToQueue>
 800285a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	3324      	adds	r3, #36	; 0x24
 8002868:	4618      	mov	r0, r3
 800286a:	f000 ffcf 	bl	800380c <xTaskRemoveFromEventList>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002874:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <xQueueGenericSend+0x1f8>)
 8002876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	e00a      	b.n	800289c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800288c:	4b39      	ldr	r3, [pc, #228]	; (8002974 <xQueueGenericSend+0x1f8>)
 800288e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800289c:	f001 ff02 	bl	80046a4 <vPortExitCritical>
				return pdPASS;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e063      	b.n	800296c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028aa:	f001 fefb 	bl	80046a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e05c      	b.n	800296c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 f809 	bl	80038d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028c6:	f001 feed 	bl	80046a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028ca:	f000 fd7b 	bl	80033c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028ce:	f001 feb9 	bl	8004644 <vPortEnterCritical>
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d103      	bne.n	80028e8 <xQueueGenericSend+0x16c>
 80028e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f4:	d103      	bne.n	80028fe <xQueueGenericSend+0x182>
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028fe:	f001 fed1 	bl	80046a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002902:	1d3a      	adds	r2, r7, #4
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fff8 	bl	8003900 <xTaskCheckForTimeOut>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d124      	bne.n	8002960 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002918:	f000 faa2 	bl	8002e60 <prvIsQueueFull>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	3310      	adds	r3, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f000 ff1e 	bl	800376c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002932:	f000 fa2d 	bl	8002d90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002936:	f000 fd53 	bl	80033e0 <xTaskResumeAll>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f af7c 	bne.w	800283a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <xQueueGenericSend+0x1f8>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
 8002952:	e772      	b.n	800283a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002956:	f000 fa1b 	bl	8002d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800295a:	f000 fd41 	bl	80033e0 <xTaskResumeAll>
 800295e:	e76c      	b.n	800283a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002962:	f000 fa15 	bl	8002d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002966:	f000 fd3b 	bl	80033e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800296a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800296c:	4618      	mov	r0, r3
 800296e:	3738      	adds	r7, #56	; 0x38
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b090      	sub	sp, #64	; 0x40
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <xQueueGenericSendFromISR+0x3c>
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <xQueueGenericSendFromISR+0x40>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <xQueueGenericSendFromISR+0x42>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d103      	bne.n	80029e2 <xQueueGenericSendFromISR+0x6a>
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <xQueueGenericSendFromISR+0x6e>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <xQueueGenericSendFromISR+0x70>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	623b      	str	r3, [r7, #32]
}
 80029fe:	bf00      	nop
 8002a00:	e7fe      	b.n	8002a00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a02:	f001 ff01 	bl	8004808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a06:	f3ef 8211 	mrs	r2, BASEPRI
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	61fa      	str	r2, [r7, #28]
 8002a1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <xQueueGenericSendFromISR+0xbc>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d12f      	bne.n	8002a94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a4a:	f000 f911 	bl	8002c70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d112      	bne.n	8002a7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d016      	beq.n	8002a8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fed1 	bl	800380c <xTaskRemoveFromEventList>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00e      	beq.n	8002a8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e007      	b.n	8002a8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a82:	3301      	adds	r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	b25a      	sxtb	r2, r3
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002a92:	e001      	b.n	8002a98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002aa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3740      	adds	r7, #64	; 0x40
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <xQueueReceive+0x30>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	623b      	str	r3, [r7, #32]
}
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <xQueueReceive+0x3e>
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <xQueueReceive+0x42>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueReceive+0x44>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <xQueueReceive+0x5e>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	61fb      	str	r3, [r7, #28]
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b0e:	f001 f83b 	bl	8003b88 <xTaskGetSchedulerState>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <xQueueReceive+0x6e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <xQueueReceive+0x72>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <xQueueReceive+0x74>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xQueueReceive+0x8e>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	61bb      	str	r3, [r7, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b3e:	f001 fd81 	bl	8004644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01f      	beq.n	8002b8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b52:	f000 f8f7 	bl	8002d44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00f      	beq.n	8002b86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	3310      	adds	r3, #16
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fe4e 	bl	800380c <xTaskRemoveFromEventList>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <xQueueReceive+0x1bc>)
 8002b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b86:	f001 fd8d 	bl	80046a4 <vPortExitCritical>
				return pdPASS;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e069      	b.n	8002c62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b94:	f001 fd86 	bl	80046a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e062      	b.n	8002c62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fe94 	bl	80038d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bb0:	f001 fd78 	bl	80046a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bb4:	f000 fc06 	bl	80033c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bb8:	f001 fd44 	bl	8004644 <vPortEnterCritical>
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc2:	b25b      	sxtb	r3, r3
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d103      	bne.n	8002bd2 <xQueueReceive+0x122>
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d103      	bne.n	8002be8 <xQueueReceive+0x138>
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be8:	f001 fd5c 	bl	80046a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bec:	1d3a      	adds	r2, r7, #4
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fe83 	bl	8003900 <xTaskCheckForTimeOut>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d123      	bne.n	8002c48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c02:	f000 f917 	bl	8002e34 <prvIsQueueEmpty>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	3324      	adds	r3, #36	; 0x24
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fda9 	bl	800376c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1c:	f000 f8b8 	bl	8002d90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c20:	f000 fbde 	bl	80033e0 <xTaskResumeAll>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d189      	bne.n	8002b3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <xQueueReceive+0x1bc>)
 8002c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	e780      	b.n	8002b3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c3e:	f000 f8a7 	bl	8002d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c42:	f000 fbcd 	bl	80033e0 <xTaskResumeAll>
 8002c46:	e77a      	b.n	8002b3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4a:	f000 f8a1 	bl	8002d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c4e:	f000 fbc7 	bl	80033e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c54:	f000 f8ee 	bl	8002e34 <prvIsQueueEmpty>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f43f af6f 	beq.w	8002b3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3730      	adds	r7, #48	; 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000ed04 	.word	0xe000ed04

08002c70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d14d      	bne.n	8002d32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 ff92 	bl	8003bc4 <xTaskPriorityDisinherit>
 8002ca0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	e043      	b.n	8002d32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d119      	bne.n	8002ce4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6858      	ldr	r0, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	f002 f822 	bl	8004d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d32b      	bcc.n	8002d32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	e026      	b.n	8002d32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68d8      	ldr	r0, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	461a      	mov	r2, r3
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	f002 f808 	bl	8004d04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	441a      	add	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	425b      	negs	r3, r3
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d105      	bne.n	8002d32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d3a:	697b      	ldr	r3, [r7, #20]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d303      	bcc.n	8002d78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68d9      	ldr	r1, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	461a      	mov	r2, r3
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f001 ffbe 	bl	8004d04 <memcpy>
	}
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d98:	f001 fc54 	bl	8004644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002da4:	e011      	b.n	8002dca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3324      	adds	r3, #36	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fd2a 	bl	800380c <xTaskRemoveFromEventList>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002dbe:	f000 fe01 	bl	80039c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dce9      	bgt.n	8002da6 <prvUnlockQueue+0x16>
 8002dd2:	e000      	b.n	8002dd6 <prvUnlockQueue+0x46>
					break;
 8002dd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	22ff      	movs	r2, #255	; 0xff
 8002dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002dde:	f001 fc61 	bl	80046a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002de2:	f001 fc2f 	bl	8004644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dee:	e011      	b.n	8002e14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d012      	beq.n	8002e1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3310      	adds	r3, #16
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fd05 	bl	800380c <xTaskRemoveFromEventList>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e08:	f000 fddc 	bl	80039c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e0c:	7bbb      	ldrb	r3, [r7, #14]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	dce9      	bgt.n	8002df0 <prvUnlockQueue+0x60>
 8002e1c:	e000      	b.n	8002e20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e28:	f001 fc3c 	bl	80046a4 <vPortExitCritical>
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e3c:	f001 fc02 	bl	8004644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e001      	b.n	8002e52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e52:	f001 fc27 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e68:	f001 fbec 	bl	8004644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d102      	bne.n	8002e7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e001      	b.n	8002e82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e82:	f001 fc0f 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 8002e86:	68fb      	ldr	r3, [r7, #12]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e014      	b.n	8002eca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <vQueueAddToRegistry+0x50>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <vQueueAddToRegistry+0x50>)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <vQueueAddToRegistry+0x50>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ec2:	e006      	b.n	8002ed2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d9e7      	bls.n	8002ea0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000794 	.word	0x20000794

08002ee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ef4:	f001 fba6 	bl	8004644 <vPortEnterCritical>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d103      	bne.n	8002f0e <vQueueWaitForMessageRestricted+0x2a>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d103      	bne.n	8002f24 <vQueueWaitForMessageRestricted+0x40>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f24:	f001 fbbe 	bl	80046a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3324      	adds	r3, #36	; 0x24
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fc3b 	bl	80037b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff26 	bl	8002d90 <prvUnlockQueue>
	}
 8002f44:	bf00      	nop
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af04      	add	r7, sp, #16
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	623b      	str	r3, [r7, #32]
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61fb      	str	r3, [r7, #28]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f92:	235c      	movs	r3, #92	; 0x5c
 8002f94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b5c      	cmp	r3, #92	; 0x5c
 8002f9a:	d00a      	beq.n	8002fb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61bb      	str	r3, [r7, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01e      	beq.n	8002ff8 <xTaskCreateStatic+0xac>
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	9302      	str	r3, [sp, #8]
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f850 	bl	8003090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ff2:	f000 f8dd 	bl	80031b0 <prvAddNewTaskToReadyList>
 8002ff6:	e001      	b.n	8002ffc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ffc:	697b      	ldr	r3, [r7, #20]
	}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003006:	b580      	push	{r7, lr}
 8003008:	b08c      	sub	sp, #48	; 0x30
 800300a:	af04      	add	r7, sp, #16
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fc34 	bl	8004888 <pvPortMalloc>
 8003020:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00e      	beq.n	8003046 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003028:	205c      	movs	r0, #92	; 0x5c
 800302a:	f001 fc2d 	bl	8004888 <pvPortMalloc>
 800302e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
 800303c:	e005      	b.n	800304a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f001 fcee 	bl	8004a20 <vPortFree>
 8003044:	e001      	b.n	800304a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	2300      	movs	r3, #0
 800305c:	9303      	str	r3, [sp, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f80e 	bl	8003090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003074:	69f8      	ldr	r0, [r7, #28]
 8003076:	f000 f89b 	bl	80031b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e002      	b.n	8003086 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003086:	69bb      	ldr	r3, [r7, #24]
	}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	21a5      	movs	r1, #165	; 0xa5
 80030aa:	f001 fdf7 	bl	8004c9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030b8:	3b01      	subs	r3, #1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f023 0307 	bic.w	r3, r3, #7
 80030c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	617b      	str	r3, [r7, #20]
}
 80030e4:	bf00      	nop
 80030e6:	e7fe      	b.n	80030e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01f      	beq.n	800312e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e012      	b.n	800311a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	7819      	ldrb	r1, [r3, #0]
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	3334      	adds	r3, #52	; 0x34
 8003104:	460a      	mov	r2, r1
 8003106:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	3301      	adds	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d9e9      	bls.n	80030f4 <prvInitialiseNewTask+0x64>
 8003120:	e000      	b.n	8003124 <prvInitialiseNewTask+0x94>
			{
				break;
 8003122:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800312c:	e003      	b.n	8003136 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	2b37      	cmp	r3, #55	; 0x37
 800313a:	d901      	bls.n	8003140 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800313c:	2337      	movs	r3, #55	; 0x37
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	3304      	adds	r3, #4
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f978 	bl	800244c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	3318      	adds	r3, #24
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f973 	bl	800244c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	2200      	movs	r2, #0
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	69b8      	ldr	r0, [r7, #24]
 8003190:	f001 f928 	bl	80043e4 <pxPortInitialiseStack>
 8003194:	4602      	mov	r2, r0
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031a6:	bf00      	nop
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031b8:	f001 fa44 	bl	8004644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <prvAddNewTaskToReadyList+0xc4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <prvAddNewTaskToReadyList+0xc4>)
 80031c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031c6:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <prvAddNewTaskToReadyList+0xc8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <prvAddNewTaskToReadyList+0xc8>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <prvAddNewTaskToReadyList+0xc4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d110      	bne.n	80031fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031dc:	f000 fc16 	bl	8003a0c <prvInitialiseTaskLists>
 80031e0:	e00d      	b.n	80031fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <prvAddNewTaskToReadyList+0xcc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <prvAddNewTaskToReadyList+0xc8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d802      	bhi.n	80031fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <prvAddNewTaskToReadyList+0xc8>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <prvAddNewTaskToReadyList+0xd0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <prvAddNewTaskToReadyList+0xd0>)
 8003206:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <prvAddNewTaskToReadyList+0xd0>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <prvAddNewTaskToReadyList+0xd4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d903      	bls.n	8003224 <prvAddNewTaskToReadyList+0x74>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <prvAddNewTaskToReadyList+0xd4>)
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4a15      	ldr	r2, [pc, #84]	; (8003288 <prvAddNewTaskToReadyList+0xd8>)
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f7ff f913 	bl	8002466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003240:	f001 fa30 	bl	80046a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <prvAddNewTaskToReadyList+0xcc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <prvAddNewTaskToReadyList+0xc8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	429a      	cmp	r2, r3
 8003258:	d207      	bcs.n	800326a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <prvAddNewTaskToReadyList+0xdc>)
 800325c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000ca8 	.word	0x20000ca8
 8003278:	200007d4 	.word	0x200007d4
 800327c:	20000cb4 	.word	0x20000cb4
 8003280:	20000cc4 	.word	0x20000cc4
 8003284:	20000cb0 	.word	0x20000cb0
 8003288:	200007d8 	.word	0x200007d8
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <vTaskDelay+0x60>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <vTaskDelay+0x30>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	60bb      	str	r3, [r7, #8]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032c0:	f000 f880 	bl	80033c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032c4:	2100      	movs	r1, #0
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fcea 	bl	8003ca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032cc:	f000 f888 	bl	80033e0 <xTaskResumeAll>
 80032d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <vTaskDelay+0x64>)
 80032da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000cd0 	.word	0x20000cd0
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003306:	463a      	mov	r2, r7
 8003308:	1d39      	adds	r1, r7, #4
 800330a:	f107 0308 	add.w	r3, r7, #8
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f848 	bl	80023a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003314:	6839      	ldr	r1, [r7, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	9202      	str	r2, [sp, #8]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	2300      	movs	r3, #0
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2300      	movs	r3, #0
 8003324:	460a      	mov	r2, r1
 8003326:	4921      	ldr	r1, [pc, #132]	; (80033ac <vTaskStartScheduler+0xb4>)
 8003328:	4821      	ldr	r0, [pc, #132]	; (80033b0 <vTaskStartScheduler+0xb8>)
 800332a:	f7ff fe0f 	bl	8002f4c <xTaskCreateStatic>
 800332e:	4603      	mov	r3, r0
 8003330:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <vTaskStartScheduler+0xbc>)
 8003332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <vTaskStartScheduler+0xbc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e001      	b.n	8003346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d102      	bne.n	8003352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800334c:	f000 fcfc 	bl	8003d48 <xTimerCreateTimerTask>
 8003350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d116      	bne.n	8003386 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	613b      	str	r3, [r7, #16]
}
 800336a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <vTaskStartScheduler+0xc0>)
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <vTaskStartScheduler+0xc4>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <vTaskStartScheduler+0xc8>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003380:	f001 f8be 	bl	8004500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003384:	e00e      	b.n	80033a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d10a      	bne.n	80033a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	60fb      	str	r3, [r7, #12]
}
 80033a0:	bf00      	nop
 80033a2:	e7fe      	b.n	80033a2 <vTaskStartScheduler+0xaa>
}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	08005604 	.word	0x08005604
 80033b0:	080039dd 	.word	0x080039dd
 80033b4:	20000ccc 	.word	0x20000ccc
 80033b8:	20000cc8 	.word	0x20000cc8
 80033bc:	20000cb4 	.word	0x20000cb4
 80033c0:	20000cac 	.word	0x20000cac

080033c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <vTaskSuspendAll+0x18>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	4a03      	ldr	r2, [pc, #12]	; (80033dc <vTaskSuspendAll+0x18>)
 80033d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20000cd0 	.word	0x20000cd0

080033e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033ee:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <xTaskResumeAll+0x118>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xTaskResumeAll+0x2c>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	603b      	str	r3, [r7, #0]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800340c:	f001 f91a 	bl	8004644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003410:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <xTaskResumeAll+0x118>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3b01      	subs	r3, #1
 8003416:	4a38      	ldr	r2, [pc, #224]	; (80034f8 <xTaskResumeAll+0x118>)
 8003418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <xTaskResumeAll+0x118>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d162      	bne.n	80034e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <xTaskResumeAll+0x11c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d05e      	beq.n	80034e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800342a:	e02f      	b.n	800348c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <xTaskResumeAll+0x120>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3318      	adds	r3, #24
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f871 	bl	8002520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3304      	adds	r3, #4
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff f86c 	bl	8002520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <xTaskResumeAll+0x124>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d903      	bls.n	800345c <xTaskResumeAll+0x7c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <xTaskResumeAll+0x124>)
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4a27      	ldr	r2, [pc, #156]	; (8003508 <xTaskResumeAll+0x128>)
 800346a:	441a      	add	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7fe fff7 	bl	8002466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <xTaskResumeAll+0x12c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <xTaskResumeAll+0x130>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <xTaskResumeAll+0x120>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1cb      	bne.n	800342c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800349a:	f000 fb55 	bl	8003b48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <xTaskResumeAll+0x134>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d010      	beq.n	80034cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034aa:	f000 f847 	bl	800353c <xTaskIncrementTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <xTaskResumeAll+0x130>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3b01      	subs	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f1      	bne.n	80034aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <xTaskResumeAll+0x134>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <xTaskResumeAll+0x130>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <xTaskResumeAll+0x138>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034e8:	f001 f8dc 	bl	80046a4 <vPortExitCritical>

	return xAlreadyYielded;
 80034ec:	68bb      	ldr	r3, [r7, #8]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000cd0 	.word	0x20000cd0
 80034fc:	20000ca8 	.word	0x20000ca8
 8003500:	20000c68 	.word	0x20000c68
 8003504:	20000cb0 	.word	0x20000cb0
 8003508:	200007d8 	.word	0x200007d8
 800350c:	200007d4 	.word	0x200007d4
 8003510:	20000cbc 	.word	0x20000cbc
 8003514:	20000cb8 	.word	0x20000cb8
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <xTaskGetTickCount+0x1c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003528:	687b      	ldr	r3, [r7, #4]
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000cac 	.word	0x20000cac

0800353c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <xTaskIncrementTick+0x148>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 808f 	bne.w	800366e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003550:	4b4d      	ldr	r3, [pc, #308]	; (8003688 <xTaskIncrementTick+0x14c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003558:	4a4b      	ldr	r2, [pc, #300]	; (8003688 <xTaskIncrementTick+0x14c>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d120      	bne.n	80035a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <xTaskIncrementTick+0x150>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <xTaskIncrementTick+0x48>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	603b      	str	r3, [r7, #0]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <xTaskIncrementTick+0x46>
 8003584:	4b41      	ldr	r3, [pc, #260]	; (800368c <xTaskIncrementTick+0x150>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <xTaskIncrementTick+0x154>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a3f      	ldr	r2, [pc, #252]	; (800368c <xTaskIncrementTick+0x150>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <xTaskIncrementTick+0x154>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <xTaskIncrementTick+0x158>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <xTaskIncrementTick+0x158>)
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	f000 fad1 	bl	8003b48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035a6:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <xTaskIncrementTick+0x15c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d349      	bcc.n	8003644 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <xTaskIncrementTick+0x150>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <xTaskIncrementTick+0x15c>)
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	601a      	str	r2, [r3, #0]
					break;
 80035c2:	e03f      	b.n	8003644 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c4:	4b31      	ldr	r3, [pc, #196]	; (800368c <xTaskIncrementTick+0x150>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d203      	bcs.n	80035e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035dc:	4a2e      	ldr	r2, [pc, #184]	; (8003698 <xTaskIncrementTick+0x15c>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035e2:	e02f      	b.n	8003644 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe ff99 	bl	8002520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	3318      	adds	r3, #24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe ff90 	bl	8002520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <xTaskIncrementTick+0x160>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d903      	bls.n	8003614 <xTaskIncrementTick+0xd8>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a22      	ldr	r2, [pc, #136]	; (800369c <xTaskIncrementTick+0x160>)
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <xTaskIncrementTick+0x164>)
 8003622:	441a      	add	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3304      	adds	r3, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f7fe ff1b 	bl	8002466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <xTaskIncrementTick+0x168>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	429a      	cmp	r2, r3
 800363c:	d3b8      	bcc.n	80035b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800363e:	2301      	movs	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003642:	e7b5      	b.n	80035b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <xTaskIncrementTick+0x168>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	4915      	ldr	r1, [pc, #84]	; (80036a0 <xTaskIncrementTick+0x164>)
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d901      	bls.n	8003660 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <xTaskIncrementTick+0x16c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e004      	b.n	8003678 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <xTaskIncrementTick+0x170>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <xTaskIncrementTick+0x170>)
 8003676:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003678:	697b      	ldr	r3, [r7, #20]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000cd0 	.word	0x20000cd0
 8003688:	20000cac 	.word	0x20000cac
 800368c:	20000c60 	.word	0x20000c60
 8003690:	20000c64 	.word	0x20000c64
 8003694:	20000cc0 	.word	0x20000cc0
 8003698:	20000cc8 	.word	0x20000cc8
 800369c:	20000cb0 	.word	0x20000cb0
 80036a0:	200007d8 	.word	0x200007d8
 80036a4:	200007d4 	.word	0x200007d4
 80036a8:	20000cbc 	.word	0x20000cbc
 80036ac:	20000cb8 	.word	0x20000cb8

080036b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036b6:	4b28      	ldr	r3, [pc, #160]	; (8003758 <vTaskSwitchContext+0xa8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036be:	4b27      	ldr	r3, [pc, #156]	; (800375c <vTaskSwitchContext+0xac>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036c4:	e041      	b.n	800374a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80036c6:	4b25      	ldr	r3, [pc, #148]	; (800375c <vTaskSwitchContext+0xac>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <vTaskSwitchContext+0xb0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e010      	b.n	80036f6 <vTaskSwitchContext+0x46>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	607b      	str	r3, [r7, #4]
}
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <vTaskSwitchContext+0x3e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	491b      	ldr	r1, [pc, #108]	; (8003764 <vTaskSwitchContext+0xb4>)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0e4      	beq.n	80036d4 <vTaskSwitchContext+0x24>
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <vTaskSwitchContext+0xb4>)
 8003716:	4413      	add	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	3308      	adds	r3, #8
 800372c:	429a      	cmp	r2, r3
 800372e:	d104      	bne.n	800373a <vTaskSwitchContext+0x8a>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <vTaskSwitchContext+0xb8>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <vTaskSwitchContext+0xb0>)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6013      	str	r3, [r2, #0]
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000cd0 	.word	0x20000cd0
 800375c:	20000cbc 	.word	0x20000cbc
 8003760:	20000cb0 	.word	0x20000cb0
 8003764:	200007d8 	.word	0x200007d8
 8003768:	200007d4 	.word	0x200007d4

0800376c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60fb      	str	r3, [r7, #12]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <vTaskPlaceOnEventList+0x44>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3318      	adds	r3, #24
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe fe87 	bl	80024ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037a0:	2101      	movs	r1, #1
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f000 fa7c 	bl	8003ca0 <prvAddCurrentTaskToDelayedList>
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200007d4 	.word	0x200007d4

080037b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	617b      	str	r3, [r7, #20]
}
 80037d8:	bf00      	nop
 80037da:	e7fe      	b.n	80037da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <vTaskPlaceOnEventListRestricted+0x54>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3318      	adds	r3, #24
 80037e2:	4619      	mov	r1, r3
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7fe fe3e 	bl	8002466 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295
 80037f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	68b8      	ldr	r0, [r7, #8]
 80037fa:	f000 fa51 	bl	8003ca0 <prvAddCurrentTaskToDelayedList>
	}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200007d4 	.word	0x200007d4

0800380c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60fb      	str	r3, [r7, #12]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fe6f 	bl	8002520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <xTaskRemoveFromEventList+0xb0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fe66 	bl	8002520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <xTaskRemoveFromEventList+0xb4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d903      	bls.n	8003868 <xTaskRemoveFromEventList+0x5c>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <xTaskRemoveFromEventList+0xb4>)
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <xTaskRemoveFromEventList+0xb8>)
 8003876:	441a      	add	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7fe fdf1 	bl	8002466 <vListInsertEnd>
 8003884:	e005      	b.n	8003892 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3318      	adds	r3, #24
 800388a:	4619      	mov	r1, r3
 800388c:	480e      	ldr	r0, [pc, #56]	; (80038c8 <xTaskRemoveFromEventList+0xbc>)
 800388e:	f7fe fdea 	bl	8002466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <xTaskRemoveFromEventList+0xc0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	429a      	cmp	r2, r3
 800389e:	d905      	bls.n	80038ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <xTaskRemoveFromEventList+0xc4>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e001      	b.n	80038b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038b0:	697b      	ldr	r3, [r7, #20]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000cd0 	.word	0x20000cd0
 80038c0:	20000cb0 	.word	0x20000cb0
 80038c4:	200007d8 	.word	0x200007d8
 80038c8:	20000c68 	.word	0x20000c68
 80038cc:	200007d4 	.word	0x200007d4
 80038d0:	20000cbc 	.word	0x20000cbc

080038d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <vTaskInternalSetTimeOutState+0x24>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <vTaskInternalSetTimeOutState+0x28>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	605a      	str	r2, [r3, #4]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	20000cc0 	.word	0x20000cc0
 80038fc:	20000cac 	.word	0x20000cac

08003900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60fb      	str	r3, [r7, #12]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003942:	f000 fe7f 	bl	8004644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <xTaskCheckForTimeOut+0xbc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d102      	bne.n	8003966 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	e023      	b.n	80039ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <xTaskCheckForTimeOut+0xc0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d007      	beq.n	8003982 <xTaskCheckForTimeOut+0x82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e015      	b.n	80039ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d20b      	bcs.n	80039a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff9b 	bl	80038d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e004      	b.n	80039ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ae:	f000 fe79 	bl	80046a4 <vPortExitCritical>

	return xReturn;
 80039b2:	69fb      	ldr	r3, [r7, #28]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000cac 	.word	0x20000cac
 80039c0:	20000cc0 	.word	0x20000cc0

080039c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <vTaskMissedYield+0x14>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	20000cbc 	.word	0x20000cbc

080039dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039e4:	f000 f852 	bl	8003a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvIdleTask+0x28>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d9f9      	bls.n	80039e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <prvIdleTask+0x2c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a00:	e7f0      	b.n	80039e4 <prvIdleTask+0x8>
 8003a02:	bf00      	nop
 8003a04:	200007d8 	.word	0x200007d8
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e00c      	b.n	8003a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <prvInitialiseTaskLists+0x60>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fcf0 	bl	800240c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b37      	cmp	r3, #55	; 0x37
 8003a36:	d9ef      	bls.n	8003a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a3a:	f7fe fce7 	bl	800240c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a40:	f7fe fce4 	bl	800240c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <prvInitialiseTaskLists+0x6c>)
 8003a46:	f7fe fce1 	bl	800240c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x70>)
 8003a4c:	f7fe fcde 	bl	800240c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <prvInitialiseTaskLists+0x74>)
 8003a52:	f7fe fcdb 	bl	800240c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x78>)
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvInitialiseTaskLists+0x7c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200007d8 	.word	0x200007d8
 8003a70:	20000c38 	.word	0x20000c38
 8003a74:	20000c4c 	.word	0x20000c4c
 8003a78:	20000c68 	.word	0x20000c68
 8003a7c:	20000c7c 	.word	0x20000c7c
 8003a80:	20000c94 	.word	0x20000c94
 8003a84:	20000c60 	.word	0x20000c60
 8003a88:	20000c64 	.word	0x20000c64

08003a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a92:	e019      	b.n	8003ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a94:	f000 fdd6 	bl	8004644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fd3b 	bl	8002520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003abe:	f000 fdf1 	bl	80046a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f810 	bl	8003ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000c7c 	.word	0x20000c7c
 8003ae0:	20000ca8 	.word	0x20000ca8
 8003ae4:	20000c90 	.word	0x20000c90

08003ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d108      	bne.n	8003b0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 ff8e 	bl	8004a20 <vPortFree>
				vPortFree( pxTCB );
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 ff8b 	bl	8004a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b0a:	e018      	b.n	8003b3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d103      	bne.n	8003b1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 ff82 	bl	8004a20 <vPortFree>
	}
 8003b1c:	e00f      	b.n	8003b3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d00a      	beq.n	8003b3e <prvDeleteTCB+0x56>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	60fb      	str	r3, [r7, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <prvDeleteTCB+0x54>
	}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <prvResetNextTaskUnblockTime+0x38>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvResetNextTaskUnblockTime+0x3c>)
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b60:	e008      	b.n	8003b74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <prvResetNextTaskUnblockTime+0x38>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <prvResetNextTaskUnblockTime+0x3c>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	20000c60 	.word	0x20000c60
 8003b84:	20000cc8 	.word	0x20000cc8

08003b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <xTaskGetSchedulerState+0x34>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b96:	2301      	movs	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e008      	b.n	8003bae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <xTaskGetSchedulerState+0x38>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bae:	687b      	ldr	r3, [r7, #4]
	}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20000cb4 	.word	0x20000cb4
 8003bc0:	20000cd0 	.word	0x20000cd0

08003bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d056      	beq.n	8003c88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <xTaskPriorityDisinherit+0xd0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d00a      	beq.n	8003bfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	60fb      	str	r3, [r7, #12]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60bb      	str	r3, [r7, #8]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d02c      	beq.n	8003c88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d128      	bne.n	8003c88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fc70 	bl	8002520 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <xTaskPriorityDisinherit+0xd4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d903      	bls.n	8003c68 <xTaskPriorityDisinherit+0xa4>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <xTaskPriorityDisinherit+0xd4>)
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <xTaskPriorityDisinherit+0xd8>)
 8003c76:	441a      	add	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7fe fbf1 	bl	8002466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c88:	697b      	ldr	r3, [r7, #20]
	}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200007d4 	.word	0x200007d4
 8003c98:	20000cb0 	.word	0x20000cb0
 8003c9c:	200007d8 	.word	0x200007d8

08003ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x90>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cb0:	4b20      	ldr	r3, [pc, #128]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe fc32 	bl	8002520 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d10a      	bne.n	8003cda <prvAddCurrentTaskToDelayedList+0x3a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4819      	ldr	r0, [pc, #100]	; (8003d38 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cd4:	f7fe fbc7 	bl	8002466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cd8:	e026      	b.n	8003d28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d209      	bcs.n	8003d06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f7fe fbd5 	bl	80024ae <vListInsert>
}
 8003d04:	e010      	b.n	8003d28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe fbcb 	bl	80024ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d202      	bcs.n	8003d28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000cac 	.word	0x20000cac
 8003d34:	200007d4 	.word	0x200007d4
 8003d38:	20000c94 	.word	0x20000c94
 8003d3c:	20000c64 	.word	0x20000c64
 8003d40:	20000c60 	.word	0x20000c60
 8003d44:	20000cc8 	.word	0x20000cc8

08003d48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d52:	f000 fb07 	bl	8004364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <xTimerCreateTimerTask+0x80>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d021      	beq.n	8003da2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d66:	1d3a      	adds	r2, r7, #4
 8003d68:	f107 0108 	add.w	r1, r7, #8
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fb31 	bl	80023d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	9202      	str	r2, [sp, #8]
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2302      	movs	r3, #2
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	460a      	mov	r2, r1
 8003d88:	4910      	ldr	r1, [pc, #64]	; (8003dcc <xTimerCreateTimerTask+0x84>)
 8003d8a:	4811      	ldr	r0, [pc, #68]	; (8003dd0 <xTimerCreateTimerTask+0x88>)
 8003d8c:	f7ff f8de 	bl	8002f4c <xTaskCreateStatic>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <xTimerCreateTimerTask+0x8c>)
 8003d94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <xTimerCreateTimerTask+0x8c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003dbe:	697b      	ldr	r3, [r7, #20]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000d04 	.word	0x20000d04
 8003dcc:	0800560c 	.word	0x0800560c
 8003dd0:	08003f0d 	.word	0x08003f0d
 8003dd4:	20000d08 	.word	0x20000d08

08003dd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	623b      	str	r3, [r7, #32]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e06:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02a      	beq.n	8003e64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	dc18      	bgt.n	8003e52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e20:	f7ff feb2 	bl	8003b88 <xTaskGetSchedulerState>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d109      	bne.n	8003e3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f107 0110 	add.w	r1, r7, #16
 8003e32:	2300      	movs	r3, #0
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	f7fe fca1 	bl	800277c <xQueueGenericSend>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e3c:	e012      	b.n	8003e64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f107 0110 	add.w	r1, r7, #16
 8003e46:	2300      	movs	r3, #0
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f7fe fc97 	bl	800277c <xQueueGenericSend>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e50:	e008      	b.n	8003e64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <xTimerGenericCommand+0x98>)
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f107 0110 	add.w	r1, r7, #16
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	f7fe fd8b 	bl	8002978 <xQueueGenericSendFromISR>
 8003e62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3728      	adds	r7, #40	; 0x28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000d04 	.word	0x20000d04

08003e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <prvProcessExpiredTimer+0x94>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fb47 	bl	8002520 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d022      	beq.n	8003ee6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	18d1      	adds	r1, r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	6978      	ldr	r0, [r7, #20]
 8003eae:	f000 f8d1 	bl	8004054 <prvInsertTimerInActiveList>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01f      	beq.n	8003ef8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	6978      	ldr	r0, [r7, #20]
 8003ec4:	f7ff ff88 	bl	8003dd8 <xTimerGenericCommand>
 8003ec8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d113      	bne.n	8003ef8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	6978      	ldr	r0, [r7, #20]
 8003efe:	4798      	blx	r3
}
 8003f00:	bf00      	nop
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000cfc 	.word	0x20000cfc

08003f0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f857 	bl	8003fcc <prvGetNextExpireTime>
 8003f1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f803 	bl	8003f30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f2a:	f000 f8d5 	bl	80040d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f2e:	e7f1      	b.n	8003f14 <prvTimerTask+0x8>

08003f30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f3a:	f7ff fa43 	bl	80033c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f3e:	f107 0308 	add.w	r3, r7, #8
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f866 	bl	8004014 <prvSampleTimeNow>
 8003f48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d130      	bne.n	8003fb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <prvProcessTimerOrBlockTask+0x3c>
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d806      	bhi.n	8003f6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f5e:	f7ff fa3f 	bl	80033e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff85 	bl	8003e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f6a:	e024      	b.n	8003fb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <prvProcessTimerOrBlockTask+0x90>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <prvProcessTimerOrBlockTask+0x50>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <prvProcessTimerOrBlockTask+0x52>
 8003f80:	2300      	movs	r3, #0
 8003f82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <prvProcessTimerOrBlockTask+0x94>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	4619      	mov	r1, r3
 8003f92:	f7fe ffa7 	bl	8002ee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f96:	f7ff fa23 	bl	80033e0 <xTaskResumeAll>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <prvProcessTimerOrBlockTask+0x98>)
 8003fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	f3bf 8f6f 	isb	sy
}
 8003fb0:	e001      	b.n	8003fb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003fb2:	f7ff fa15 	bl	80033e0 <xTaskResumeAll>
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000d00 	.word	0x20000d00
 8003fc4:	20000d04 	.word	0x20000d04
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <prvGetNextExpireTime+0x44>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <prvGetNextExpireTime+0x16>
 8003fde:	2201      	movs	r2, #1
 8003fe0:	e000      	b.n	8003fe4 <prvGetNextExpireTime+0x18>
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <prvGetNextExpireTime+0x44>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004000:	68fb      	ldr	r3, [r7, #12]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000cfc 	.word	0x20000cfc

08004014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800401c:	f7ff fa7e 	bl	800351c <xTaskGetTickCount>
 8004020:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <prvSampleTimeNow+0x3c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	d205      	bcs.n	8004038 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800402c:	f000 f936 	bl	800429c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e002      	b.n	800403e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <prvSampleTimeNow+0x3c>)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004044:	68fb      	ldr	r3, [r7, #12]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000d0c 	.word	0x20000d0c

08004054 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d812      	bhi.n	80040a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e01b      	b.n	80040c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <prvInsertTimerInActiveList+0x7c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7fe fa08 	bl	80024ae <vListInsert>
 800409e:	e012      	b.n	80040c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d206      	bcs.n	80040b6 <prvInsertTimerInActiveList+0x62>
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e007      	b.n	80040c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <prvInsertTimerInActiveList+0x80>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fe f9f4 	bl	80024ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040c6:	697b      	ldr	r3, [r7, #20]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000d00 	.word	0x20000d00
 80040d4:	20000cfc 	.word	0x20000cfc

080040d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08e      	sub	sp, #56	; 0x38
 80040dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040de:	e0ca      	b.n	8004276 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	da18      	bge.n	8004118 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	3304      	adds	r3, #4
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	61fb      	str	r3, [r7, #28]
}
 8004104:	bf00      	nop
 8004106:	e7fe      	b.n	8004106 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410e:	6850      	ldr	r0, [r2, #4]
 8004110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004112:	6892      	ldr	r2, [r2, #8]
 8004114:	4611      	mov	r1, r2
 8004116:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f2c0 80ab 	blt.w	8004276 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	3304      	adds	r3, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe f9f5 	bl	8002520 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004136:	463b      	mov	r3, r7
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff6b 	bl	8004014 <prvSampleTimeNow>
 800413e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b09      	cmp	r3, #9
 8004144:	f200 8096 	bhi.w	8004274 <prvProcessReceivedCommands+0x19c>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <prvProcessReceivedCommands+0x78>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004179 	.word	0x08004179
 8004154:	08004179 	.word	0x08004179
 8004158:	08004179 	.word	0x08004179
 800415c:	080041ed 	.word	0x080041ed
 8004160:	08004201 	.word	0x08004201
 8004164:	0800424b 	.word	0x0800424b
 8004168:	08004179 	.word	0x08004179
 800416c:	08004179 	.word	0x08004179
 8004170:	080041ed 	.word	0x080041ed
 8004174:	08004201 	.word	0x08004201
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	18d1      	adds	r1, r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004198:	f7ff ff5c 	bl	8004054 <prvInsertTimerInActiveList>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d069      	beq.n	8004276 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05e      	beq.n	8004276 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	441a      	add	r2, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	2100      	movs	r1, #0
 80041c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ca:	f7ff fe05 	bl	8003dd8 <xTimerGenericCommand>
 80041ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d14f      	bne.n	8004276 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	61bb      	str	r3, [r7, #24]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80041fe:	e03a      	b.n	8004276 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	617b      	str	r3, [r7, #20]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004244:	f7ff ff06 	bl	8004054 <prvInsertTimerInActiveList>
					break;
 8004248:	e015      	b.n	8004276 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800425a:	f000 fbe1 	bl	8004a20 <vPortFree>
 800425e:	e00a      	b.n	8004276 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004272:	e000      	b.n	8004276 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004274:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <prvProcessReceivedCommands+0x1c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	1d39      	adds	r1, r7, #4
 800427c:	2200      	movs	r2, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fc16 	bl	8002ab0 <xQueueReceive>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	f47f af2a 	bne.w	80040e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3730      	adds	r7, #48	; 0x30
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000d04 	.word	0x20000d04

0800429c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042a2:	e048      	b.n	8004336 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042a4:	4b2d      	ldr	r3, [pc, #180]	; (800435c <prvSwitchTimerLists+0xc0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ae:	4b2b      	ldr	r3, [pc, #172]	; (800435c <prvSwitchTimerLists+0xc0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe f92f 	bl	8002520 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02e      	beq.n	8004336 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d90e      	bls.n	8004308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042f6:	4b19      	ldr	r3, [pc, #100]	; (800435c <prvSwitchTimerLists+0xc0>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f7fe f8d4 	bl	80024ae <vListInsert>
 8004306:	e016      	b.n	8004336 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2300      	movs	r3, #0
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	2100      	movs	r1, #0
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f7ff fd60 	bl	8003dd8 <xTimerGenericCommand>
 8004318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	603b      	str	r3, [r7, #0]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <prvSwitchTimerLists+0xc0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1b1      	bne.n	80042a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <prvSwitchTimerLists+0xc0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004346:	4b06      	ldr	r3, [pc, #24]	; (8004360 <prvSwitchTimerLists+0xc4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a04      	ldr	r2, [pc, #16]	; (800435c <prvSwitchTimerLists+0xc0>)
 800434c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800434e:	4a04      	ldr	r2, [pc, #16]	; (8004360 <prvSwitchTimerLists+0xc4>)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000cfc 	.word	0x20000cfc
 8004360:	20000d00 	.word	0x20000d00

08004364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800436a:	f000 f96b 	bl	8004644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <prvCheckForValidListAndQueue+0x60>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d120      	bne.n	80043b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004376:	4814      	ldr	r0, [pc, #80]	; (80043c8 <prvCheckForValidListAndQueue+0x64>)
 8004378:	f7fe f848 	bl	800240c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800437c:	4813      	ldr	r0, [pc, #76]	; (80043cc <prvCheckForValidListAndQueue+0x68>)
 800437e:	f7fe f845 	bl	800240c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <prvCheckForValidListAndQueue+0x6c>)
 8004384:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <prvCheckForValidListAndQueue+0x64>)
 8004386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004388:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <prvCheckForValidListAndQueue+0x70>)
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <prvCheckForValidListAndQueue+0x68>)
 800438c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <prvCheckForValidListAndQueue+0x74>)
 8004394:	4a11      	ldr	r2, [pc, #68]	; (80043dc <prvCheckForValidListAndQueue+0x78>)
 8004396:	2110      	movs	r1, #16
 8004398:	200a      	movs	r0, #10
 800439a:	f7fe f953 	bl	8002644 <xQueueGenericCreateStatic>
 800439e:	4603      	mov	r3, r0
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <prvCheckForValidListAndQueue+0x60>)
 80043a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <prvCheckForValidListAndQueue+0x60>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <prvCheckForValidListAndQueue+0x60>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	490b      	ldr	r1, [pc, #44]	; (80043e0 <prvCheckForValidListAndQueue+0x7c>)
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fd6c 	bl	8002e90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043b8:	f000 f974 	bl	80046a4 <vPortExitCritical>
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000d04 	.word	0x20000d04
 80043c8:	20000cd4 	.word	0x20000cd4
 80043cc:	20000ce8 	.word	0x20000ce8
 80043d0:	20000cfc 	.word	0x20000cfc
 80043d4:	20000d00 	.word	0x20000d00
 80043d8:	20000db0 	.word	0x20000db0
 80043dc:	20000d10 	.word	0x20000d10
 80043e0:	08005614 	.word	0x08005614

080043e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3b04      	subs	r3, #4
 80043f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b04      	subs	r3, #4
 8004402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3b04      	subs	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004414:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <pxPortInitialiseStack+0x64>)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b14      	subs	r3, #20
 800441e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b04      	subs	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f06f 0202 	mvn.w	r2, #2
 8004432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b20      	subs	r3, #32
 8004438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	0800444d 	.word	0x0800444d

0800444c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <prvTaskExitError+0x54>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d00a      	beq.n	8004476 <prvTaskExitError+0x2a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60fb      	str	r3, [r7, #12]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <prvTaskExitError+0x28>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
}
 8004488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800448a:	bf00      	nop
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0fc      	beq.n	800448c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	2000000c 	.word	0x2000000c
	...

080044b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <pxCurrentTCBConst2>)
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	f380 8809 	msr	PSP, r0
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	4770      	bx	lr
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst2>:
 80044d0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044d8:	4808      	ldr	r0, [pc, #32]	; (80044fc <prvPortStartFirstTask+0x24>)
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	6800      	ldr	r0, [r0, #0]
 80044de:	f380 8808 	msr	MSP, r0
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8814 	msr	CONTROL, r0
 80044ea:	b662      	cpsie	i
 80044ec:	b661      	cpsie	f
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	df00      	svc	0
 80044f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044fa:	bf00      	nop
 80044fc:	e000ed08 	.word	0xe000ed08

08004500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004506:	4b46      	ldr	r3, [pc, #280]	; (8004620 <xPortStartScheduler+0x120>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a46      	ldr	r2, [pc, #280]	; (8004624 <xPortStartScheduler+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10a      	bne.n	8004526 <xPortStartScheduler+0x26>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <xPortStartScheduler+0x120>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3f      	ldr	r2, [pc, #252]	; (8004628 <xPortStartScheduler+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <xPortStartScheduler+0x46>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	60fb      	str	r3, [r7, #12]
}
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <xPortStartScheduler+0x12c>)
 8004548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	22ff      	movs	r2, #255	; 0xff
 8004556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <xPortStartScheduler+0x130>)
 800456c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <xPortStartScheduler+0x134>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004574:	e009      	b.n	800458a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004576:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <xPortStartScheduler+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3b01      	subs	r3, #1
 800457c:	4a2d      	ldr	r2, [pc, #180]	; (8004634 <xPortStartScheduler+0x134>)
 800457e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d0ef      	beq.n	8004576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <xPortStartScheduler+0x134>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1c3 0307 	rsb	r3, r3, #7
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d00a      	beq.n	80045b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60bb      	str	r3, [r7, #8]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045b8:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <xPortStartScheduler+0x134>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	4a1d      	ldr	r2, [pc, #116]	; (8004634 <xPortStartScheduler+0x134>)
 80045c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <xPortStartScheduler+0x134>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ca:	4a1a      	ldr	r2, [pc, #104]	; (8004634 <xPortStartScheduler+0x134>)
 80045cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <xPortStartScheduler+0x138>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <xPortStartScheduler+0x138>)
 80045dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <xPortStartScheduler+0x138>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a14      	ldr	r2, [pc, #80]	; (8004638 <xPortStartScheduler+0x138>)
 80045e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045ee:	f000 f8dd 	bl	80047ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045f2:	4b12      	ldr	r3, [pc, #72]	; (800463c <xPortStartScheduler+0x13c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045f8:	f000 f8fc 	bl	80047f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <xPortStartScheduler+0x140>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <xPortStartScheduler+0x140>)
 8004602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004608:	f7ff ff66 	bl	80044d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800460c:	f7ff f850 	bl	80036b0 <vTaskSwitchContext>
	prvTaskExitError();
 8004610:	f7ff ff1c 	bl	800444c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000ed00 	.word	0xe000ed00
 8004624:	410fc271 	.word	0x410fc271
 8004628:	410fc270 	.word	0x410fc270
 800462c:	e000e400 	.word	0xe000e400
 8004630:	20000e00 	.word	0x20000e00
 8004634:	20000e04 	.word	0x20000e04
 8004638:	e000ed20 	.word	0xe000ed20
 800463c:	2000000c 	.word	0x2000000c
 8004640:	e000ef34 	.word	0xe000ef34

08004644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	607b      	str	r3, [r7, #4]
}
 800465c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <vPortEnterCritical+0x58>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3301      	adds	r3, #1
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <vPortEnterCritical+0x58>)
 8004666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <vPortEnterCritical+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d10f      	bne.n	8004690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <vPortEnterCritical+0x5c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <vPortEnterCritical+0x4c>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	603b      	str	r3, [r7, #0]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vPortEnterCritical+0x4a>
	}
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	2000000c 	.word	0x2000000c
 80046a0:	e000ed04 	.word	0xe000ed04

080046a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <vPortExitCritical+0x50>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <vPortExitCritical+0x24>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	607b      	str	r3, [r7, #4]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <vPortExitCritical+0x50>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <vPortExitCritical+0x50>)
 80046d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <vPortExitCritical+0x50>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <vPortExitCritical+0x42>
 80046da:	2300      	movs	r3, #0
 80046dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f383 8811 	msr	BASEPRI, r3
}
 80046e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	2000000c 	.word	0x2000000c
	...

08004700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004700:	f3ef 8009 	mrs	r0, PSP
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4b15      	ldr	r3, [pc, #84]	; (8004760 <pxCurrentTCBConst>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	f01e 0f10 	tst.w	lr, #16
 8004710:	bf08      	it	eq
 8004712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	6010      	str	r0, [r2, #0]
 800471c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004724:	f380 8811 	msr	BASEPRI, r0
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f7fe ffbe 	bl	80036b0 <vTaskSwitchContext>
 8004734:	f04f 0000 	mov.w	r0, #0
 8004738:	f380 8811 	msr	BASEPRI, r0
 800473c:	bc09      	pop	{r0, r3}
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	6808      	ldr	r0, [r1, #0]
 8004742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004746:	f01e 0f10 	tst.w	lr, #16
 800474a:	bf08      	it	eq
 800474c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004750:	f380 8809 	msr	PSP, r0
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst>:
 8004760:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	607b      	str	r3, [r7, #4]
}
 8004780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004782:	f7fe fedb 	bl	800353c <xTaskIncrementTick>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <xPortSysTickHandler+0x40>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f383 8811 	msr	BASEPRI, r3
}
 800479e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <vPortSetupTimerInterrupt+0x38>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <vPortSetupTimerInterrupt+0x3c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <vPortSetupTimerInterrupt+0x40>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <vPortSetupTimerInterrupt+0x44>)
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ce:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010
 80047e4:	e000e018 	.word	0xe000e018
 80047e8:	20000000 	.word	0x20000000
 80047ec:	10624dd3 	.word	0x10624dd3
 80047f0:	e000e014 	.word	0xe000e014

080047f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004804 <vPortEnableVFP+0x10>
 80047f8:	6801      	ldr	r1, [r0, #0]
 80047fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047fe:	6001      	str	r1, [r0, #0]
 8004800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004802:	bf00      	nop
 8004804:	e000ed88 	.word	0xe000ed88

08004808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800480e:	f3ef 8305 	mrs	r3, IPSR
 8004812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d914      	bls.n	8004844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <vPortValidateInterruptPriority+0x70>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004824:	4b15      	ldr	r3, [pc, #84]	; (800487c <vPortValidateInterruptPriority+0x74>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	7afa      	ldrb	r2, [r7, #11]
 800482a:	429a      	cmp	r2, r3
 800482c:	d20a      	bcs.n	8004844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
 8004842:	e7fe      	b.n	8004842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <vPortValidateInterruptPriority+0x78>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <vPortValidateInterruptPriority+0x7c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d90a      	bls.n	800486a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	603b      	str	r3, [r7, #0]
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <vPortValidateInterruptPriority+0x60>
	}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	e000e3f0 	.word	0xe000e3f0
 800487c:	20000e00 	.word	0x20000e00
 8004880:	e000ed0c 	.word	0xe000ed0c
 8004884:	20000e04 	.word	0x20000e04

08004888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004894:	f7fe fd96 	bl	80033c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004898:	4b5b      	ldr	r3, [pc, #364]	; (8004a08 <pvPortMalloc+0x180>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048a0:	f000 f920 	bl	8004ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <pvPortMalloc+0x184>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8093 	bne.w	80049d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01d      	beq.n	80048f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048b8:	2208      	movs	r2, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d014      	beq.n	80048f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f023 0307 	bic.w	r3, r3, #7
 80048d0:	3308      	adds	r3, #8
 80048d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <pvPortMalloc+0x6c>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	617b      	str	r3, [r7, #20]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d06e      	beq.n	80049d8 <pvPortMalloc+0x150>
 80048fa:	4b45      	ldr	r3, [pc, #276]	; (8004a10 <pvPortMalloc+0x188>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d869      	bhi.n	80049d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004904:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <pvPortMalloc+0x18c>)
 8004906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004908:	4b42      	ldr	r3, [pc, #264]	; (8004a14 <pvPortMalloc+0x18c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800490e:	e004      	b.n	800491a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d903      	bls.n	800492c <pvPortMalloc+0xa4>
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f1      	bne.n	8004910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800492c:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <pvPortMalloc+0x180>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	429a      	cmp	r2, r3
 8004934:	d050      	beq.n	80049d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2208      	movs	r2, #8
 800493c:	4413      	add	r3, r2
 800493e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	2308      	movs	r3, #8
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	429a      	cmp	r2, r3
 8004956:	d91f      	bls.n	8004998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <pvPortMalloc+0xf8>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	613b      	str	r3, [r7, #16]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004992:	69b8      	ldr	r0, [r7, #24]
 8004994:	f000 f908 	bl	8004ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004998:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <pvPortMalloc+0x188>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <pvPortMalloc+0x188>)
 80049a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049a6:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <pvPortMalloc+0x188>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <pvPortMalloc+0x190>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d203      	bcs.n	80049ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <pvPortMalloc+0x188>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <pvPortMalloc+0x190>)
 80049b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <pvPortMalloc+0x184>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <pvPortMalloc+0x194>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	4a11      	ldr	r2, [pc, #68]	; (8004a1c <pvPortMalloc+0x194>)
 80049d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049d8:	f7fe fd02 	bl	80033e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <pvPortMalloc+0x174>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <pvPortMalloc+0x172>
	return pvReturn;
 80049fc:	69fb      	ldr	r3, [r7, #28]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3728      	adds	r7, #40	; 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20004a10 	.word	0x20004a10
 8004a0c:	20004a24 	.word	0x20004a24
 8004a10:	20004a14 	.word	0x20004a14
 8004a14:	20004a08 	.word	0x20004a08
 8004a18:	20004a18 	.word	0x20004a18
 8004a1c:	20004a1c 	.word	0x20004a1c

08004a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d04d      	beq.n	8004ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a32:	2308      	movs	r3, #8
 8004a34:	425b      	negs	r3, r3
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4413      	add	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <vPortFree+0xb8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <vPortFree+0x44>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	60fb      	str	r3, [r7, #12]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <vPortFree+0x62>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60bb      	str	r3, [r7, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	e7fe      	b.n	8004a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <vPortFree+0xb8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01e      	beq.n	8004ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11a      	bne.n	8004ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <vPortFree+0xb8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004aa8:	f7fe fc8c 	bl	80033c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <vPortFree+0xbc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	4a09      	ldr	r2, [pc, #36]	; (8004adc <vPortFree+0xbc>)
 8004ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aba:	6938      	ldr	r0, [r7, #16]
 8004abc:	f000 f874 	bl	8004ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <vPortFree+0xc0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <vPortFree+0xc0>)
 8004ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004aca:	f7fe fc89 	bl	80033e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20004a24 	.word	0x20004a24
 8004adc:	20004a14 	.word	0x20004a14
 8004ae0:	20004a20 	.word	0x20004a20

08004ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <prvHeapInit+0xac>)
 8004af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3307      	adds	r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0307 	bic.w	r3, r3, #7
 8004b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <prvHeapInit+0xac>)
 8004b14:	4413      	add	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <prvHeapInit+0xb0>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <prvHeapInit+0xb0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b30:	2208      	movs	r2, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <prvHeapInit+0xb4>)
 8004b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <prvHeapInit+0xb4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <prvHeapInit+0xb4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <prvHeapInit+0xb4>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <prvHeapInit+0xb8>)
 8004b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <prvHeapInit+0xbc>)
 8004b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <prvHeapInit+0xc0>)
 8004b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	20000e08 	.word	0x20000e08
 8004b94:	20004a08 	.word	0x20004a08
 8004b98:	20004a10 	.word	0x20004a10
 8004b9c:	20004a18 	.word	0x20004a18
 8004ba0:	20004a14 	.word	0x20004a14
 8004ba4:	20004a24 	.word	0x20004a24

08004ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <prvInsertBlockIntoFreeList+0xac>)
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e002      	b.n	8004bbc <prvInsertBlockIntoFreeList+0x14>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d8f7      	bhi.n	8004bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d108      	bne.n	8004bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	441a      	add	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d118      	bne.n	8004c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <prvInsertBlockIntoFreeList+0xb0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d00d      	beq.n	8004c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e008      	b.n	8004c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <prvInsertBlockIntoFreeList+0xb0>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e003      	b.n	8004c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d002      	beq.n	8004c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20004a08 	.word	0x20004a08
 8004c58:	20004a10 	.word	0x20004a10

08004c5c <_vsiprintf_r>:
 8004c5c:	b500      	push	{lr}
 8004c5e:	b09b      	sub	sp, #108	; 0x6c
 8004c60:	9100      	str	r1, [sp, #0]
 8004c62:	9104      	str	r1, [sp, #16]
 8004c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c68:	9105      	str	r1, [sp, #20]
 8004c6a:	9102      	str	r1, [sp, #8]
 8004c6c:	4905      	ldr	r1, [pc, #20]	; (8004c84 <_vsiprintf_r+0x28>)
 8004c6e:	9103      	str	r1, [sp, #12]
 8004c70:	4669      	mov	r1, sp
 8004c72:	f000 f9a7 	bl	8004fc4 <_svfiprintf_r>
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	b01b      	add	sp, #108	; 0x6c
 8004c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c82:	bf00      	nop
 8004c84:	ffff0208 	.word	0xffff0208

08004c88 <vsiprintf>:
 8004c88:	4613      	mov	r3, r2
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4802      	ldr	r0, [pc, #8]	; (8004c98 <vsiprintf+0x10>)
 8004c90:	6800      	ldr	r0, [r0, #0]
 8004c92:	f7ff bfe3 	b.w	8004c5c <_vsiprintf_r>
 8004c96:	bf00      	nop
 8004c98:	2000005c 	.word	0x2000005c

08004c9c <memset>:
 8004c9c:	4402      	add	r2, r0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <__errno>:
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <__errno+0x8>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000005c 	.word	0x2000005c

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 fc6a 	bl	80055a4 <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	080056dc 	.word	0x080056dc
 8004cf4:	080056dc 	.word	0x080056dc
 8004cf8:	080056dc 	.word	0x080056dc
 8004cfc:	080056e0 	.word	0x080056e0

08004d00 <__retarget_lock_acquire_recursive>:
 8004d00:	4770      	bx	lr

08004d02 <__retarget_lock_release_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <memcpy>:
 8004d04:	440a      	add	r2, r1
 8004d06:	4291      	cmp	r1, r2
 8004d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d0c:	d100      	bne.n	8004d10 <memcpy+0xc>
 8004d0e:	4770      	bx	lr
 8004d10:	b510      	push	{r4, lr}
 8004d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	d1f9      	bne.n	8004d12 <memcpy+0xe>
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <_free_r>:
 8004d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d22:	2900      	cmp	r1, #0
 8004d24:	d044      	beq.n	8004db0 <_free_r+0x90>
 8004d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2a:	9001      	str	r0, [sp, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d32:	bfb8      	it	lt
 8004d34:	18e4      	addlt	r4, r4, r3
 8004d36:	f000 f8df 	bl	8004ef8 <__malloc_lock>
 8004d3a:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <_free_r+0x94>)
 8004d3c:	9801      	ldr	r0, [sp, #4]
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	b933      	cbnz	r3, 8004d50 <_free_r+0x30>
 8004d42:	6063      	str	r3, [r4, #4]
 8004d44:	6014      	str	r4, [r2, #0]
 8004d46:	b003      	add	sp, #12
 8004d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d4c:	f000 b8da 	b.w	8004f04 <__malloc_unlock>
 8004d50:	42a3      	cmp	r3, r4
 8004d52:	d908      	bls.n	8004d66 <_free_r+0x46>
 8004d54:	6825      	ldr	r5, [r4, #0]
 8004d56:	1961      	adds	r1, r4, r5
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf01      	itttt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	1949      	addeq	r1, r1, r5
 8004d62:	6021      	streq	r1, [r4, #0]
 8004d64:	e7ed      	b.n	8004d42 <_free_r+0x22>
 8004d66:	461a      	mov	r2, r3
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b10b      	cbz	r3, 8004d70 <_free_r+0x50>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d9fa      	bls.n	8004d66 <_free_r+0x46>
 8004d70:	6811      	ldr	r1, [r2, #0]
 8004d72:	1855      	adds	r5, r2, r1
 8004d74:	42a5      	cmp	r5, r4
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0x70>
 8004d78:	6824      	ldr	r4, [r4, #0]
 8004d7a:	4421      	add	r1, r4
 8004d7c:	1854      	adds	r4, r2, r1
 8004d7e:	42a3      	cmp	r3, r4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	d1e0      	bne.n	8004d46 <_free_r+0x26>
 8004d84:	681c      	ldr	r4, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	6053      	str	r3, [r2, #4]
 8004d8a:	440c      	add	r4, r1
 8004d8c:	6014      	str	r4, [r2, #0]
 8004d8e:	e7da      	b.n	8004d46 <_free_r+0x26>
 8004d90:	d902      	bls.n	8004d98 <_free_r+0x78>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6003      	str	r3, [r0, #0]
 8004d96:	e7d6      	b.n	8004d46 <_free_r+0x26>
 8004d98:	6825      	ldr	r5, [r4, #0]
 8004d9a:	1961      	adds	r1, r4, r5
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf04      	itt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	bf04      	itt	eq
 8004da8:	1949      	addeq	r1, r1, r5
 8004daa:	6021      	streq	r1, [r4, #0]
 8004dac:	6054      	str	r4, [r2, #4]
 8004dae:	e7ca      	b.n	8004d46 <_free_r+0x26>
 8004db0:	b003      	add	sp, #12
 8004db2:	bd30      	pop	{r4, r5, pc}
 8004db4:	20004b68 	.word	0x20004b68

08004db8 <sbrk_aligned>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4e0e      	ldr	r6, [pc, #56]	; (8004df4 <sbrk_aligned+0x3c>)
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	6831      	ldr	r1, [r6, #0]
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	b911      	cbnz	r1, 8004dca <sbrk_aligned+0x12>
 8004dc4:	f000 fba6 	bl	8005514 <_sbrk_r>
 8004dc8:	6030      	str	r0, [r6, #0]
 8004dca:	4621      	mov	r1, r4
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f000 fba1 	bl	8005514 <_sbrk_r>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d00a      	beq.n	8004dec <sbrk_aligned+0x34>
 8004dd6:	1cc4      	adds	r4, r0, #3
 8004dd8:	f024 0403 	bic.w	r4, r4, #3
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d007      	beq.n	8004df0 <sbrk_aligned+0x38>
 8004de0:	1a21      	subs	r1, r4, r0
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 fb96 	bl	8005514 <_sbrk_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d101      	bne.n	8004df0 <sbrk_aligned+0x38>
 8004dec:	f04f 34ff 	mov.w	r4, #4294967295
 8004df0:	4620      	mov	r0, r4
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	20004b6c 	.word	0x20004b6c

08004df8 <_malloc_r>:
 8004df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dfc:	1ccd      	adds	r5, r1, #3
 8004dfe:	f025 0503 	bic.w	r5, r5, #3
 8004e02:	3508      	adds	r5, #8
 8004e04:	2d0c      	cmp	r5, #12
 8004e06:	bf38      	it	cc
 8004e08:	250c      	movcc	r5, #12
 8004e0a:	2d00      	cmp	r5, #0
 8004e0c:	4607      	mov	r7, r0
 8004e0e:	db01      	blt.n	8004e14 <_malloc_r+0x1c>
 8004e10:	42a9      	cmp	r1, r5
 8004e12:	d905      	bls.n	8004e20 <_malloc_r+0x28>
 8004e14:	230c      	movs	r3, #12
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	2600      	movs	r6, #0
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ef4 <_malloc_r+0xfc>
 8004e24:	f000 f868 	bl	8004ef8 <__malloc_lock>
 8004e28:	f8d8 3000 	ldr.w	r3, [r8]
 8004e2c:	461c      	mov	r4, r3
 8004e2e:	bb5c      	cbnz	r4, 8004e88 <_malloc_r+0x90>
 8004e30:	4629      	mov	r1, r5
 8004e32:	4638      	mov	r0, r7
 8004e34:	f7ff ffc0 	bl	8004db8 <sbrk_aligned>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	d155      	bne.n	8004eea <_malloc_r+0xf2>
 8004e3e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e42:	4626      	mov	r6, r4
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	d145      	bne.n	8004ed4 <_malloc_r+0xdc>
 8004e48:	2c00      	cmp	r4, #0
 8004e4a:	d048      	beq.n	8004ede <_malloc_r+0xe6>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4638      	mov	r0, r7
 8004e52:	eb04 0903 	add.w	r9, r4, r3
 8004e56:	f000 fb5d 	bl	8005514 <_sbrk_r>
 8004e5a:	4581      	cmp	r9, r0
 8004e5c:	d13f      	bne.n	8004ede <_malloc_r+0xe6>
 8004e5e:	6821      	ldr	r1, [r4, #0]
 8004e60:	1a6d      	subs	r5, r5, r1
 8004e62:	4629      	mov	r1, r5
 8004e64:	4638      	mov	r0, r7
 8004e66:	f7ff ffa7 	bl	8004db8 <sbrk_aligned>
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	d037      	beq.n	8004ede <_malloc_r+0xe6>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	442b      	add	r3, r5
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	f8d8 3000 	ldr.w	r3, [r8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d038      	beq.n	8004eee <_malloc_r+0xf6>
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	42a2      	cmp	r2, r4
 8004e80:	d12b      	bne.n	8004eda <_malloc_r+0xe2>
 8004e82:	2200      	movs	r2, #0
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	e00f      	b.n	8004ea8 <_malloc_r+0xb0>
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	1b52      	subs	r2, r2, r5
 8004e8c:	d41f      	bmi.n	8004ece <_malloc_r+0xd6>
 8004e8e:	2a0b      	cmp	r2, #11
 8004e90:	d917      	bls.n	8004ec2 <_malloc_r+0xca>
 8004e92:	1961      	adds	r1, r4, r5
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	6025      	str	r5, [r4, #0]
 8004e98:	bf18      	it	ne
 8004e9a:	6059      	strne	r1, [r3, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	bf08      	it	eq
 8004ea0:	f8c8 1000 	streq.w	r1, [r8]
 8004ea4:	5162      	str	r2, [r4, r5]
 8004ea6:	604b      	str	r3, [r1, #4]
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f104 060b 	add.w	r6, r4, #11
 8004eae:	f000 f829 	bl	8004f04 <__malloc_unlock>
 8004eb2:	f026 0607 	bic.w	r6, r6, #7
 8004eb6:	1d23      	adds	r3, r4, #4
 8004eb8:	1af2      	subs	r2, r6, r3
 8004eba:	d0ae      	beq.n	8004e1a <_malloc_r+0x22>
 8004ebc:	1b9b      	subs	r3, r3, r6
 8004ebe:	50a3      	str	r3, [r4, r2]
 8004ec0:	e7ab      	b.n	8004e1a <_malloc_r+0x22>
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	6862      	ldr	r2, [r4, #4]
 8004ec6:	d1dd      	bne.n	8004e84 <_malloc_r+0x8c>
 8004ec8:	f8c8 2000 	str.w	r2, [r8]
 8004ecc:	e7ec      	b.n	8004ea8 <_malloc_r+0xb0>
 8004ece:	4623      	mov	r3, r4
 8004ed0:	6864      	ldr	r4, [r4, #4]
 8004ed2:	e7ac      	b.n	8004e2e <_malloc_r+0x36>
 8004ed4:	4634      	mov	r4, r6
 8004ed6:	6876      	ldr	r6, [r6, #4]
 8004ed8:	e7b4      	b.n	8004e44 <_malloc_r+0x4c>
 8004eda:	4613      	mov	r3, r2
 8004edc:	e7cc      	b.n	8004e78 <_malloc_r+0x80>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f000 f80e 	bl	8004f04 <__malloc_unlock>
 8004ee8:	e797      	b.n	8004e1a <_malloc_r+0x22>
 8004eea:	6025      	str	r5, [r4, #0]
 8004eec:	e7dc      	b.n	8004ea8 <_malloc_r+0xb0>
 8004eee:	605b      	str	r3, [r3, #4]
 8004ef0:	deff      	udf	#255	; 0xff
 8004ef2:	bf00      	nop
 8004ef4:	20004b68 	.word	0x20004b68

08004ef8 <__malloc_lock>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__malloc_lock+0x8>)
 8004efa:	f7ff bf01 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 8004efe:	bf00      	nop
 8004f00:	20004b64 	.word	0x20004b64

08004f04 <__malloc_unlock>:
 8004f04:	4801      	ldr	r0, [pc, #4]	; (8004f0c <__malloc_unlock+0x8>)
 8004f06:	f7ff befc 	b.w	8004d02 <__retarget_lock_release_recursive>
 8004f0a:	bf00      	nop
 8004f0c:	20004b64 	.word	0x20004b64

08004f10 <__ssputs_r>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	688e      	ldr	r6, [r1, #8]
 8004f16:	461f      	mov	r7, r3
 8004f18:	42be      	cmp	r6, r7
 8004f1a:	680b      	ldr	r3, [r1, #0]
 8004f1c:	4682      	mov	sl, r0
 8004f1e:	460c      	mov	r4, r1
 8004f20:	4690      	mov	r8, r2
 8004f22:	d82c      	bhi.n	8004f7e <__ssputs_r+0x6e>
 8004f24:	898a      	ldrh	r2, [r1, #12]
 8004f26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f2a:	d026      	beq.n	8004f7a <__ssputs_r+0x6a>
 8004f2c:	6965      	ldr	r5, [r4, #20]
 8004f2e:	6909      	ldr	r1, [r1, #16]
 8004f30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f34:	eba3 0901 	sub.w	r9, r3, r1
 8004f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f3c:	1c7b      	adds	r3, r7, #1
 8004f3e:	444b      	add	r3, r9
 8004f40:	106d      	asrs	r5, r5, #1
 8004f42:	429d      	cmp	r5, r3
 8004f44:	bf38      	it	cc
 8004f46:	461d      	movcc	r5, r3
 8004f48:	0553      	lsls	r3, r2, #21
 8004f4a:	d527      	bpl.n	8004f9c <__ssputs_r+0x8c>
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f7ff ff53 	bl	8004df8 <_malloc_r>
 8004f52:	4606      	mov	r6, r0
 8004f54:	b360      	cbz	r0, 8004fb0 <__ssputs_r+0xa0>
 8004f56:	6921      	ldr	r1, [r4, #16]
 8004f58:	464a      	mov	r2, r9
 8004f5a:	f7ff fed3 	bl	8004d04 <memcpy>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f68:	81a3      	strh	r3, [r4, #12]
 8004f6a:	6126      	str	r6, [r4, #16]
 8004f6c:	6165      	str	r5, [r4, #20]
 8004f6e:	444e      	add	r6, r9
 8004f70:	eba5 0509 	sub.w	r5, r5, r9
 8004f74:	6026      	str	r6, [r4, #0]
 8004f76:	60a5      	str	r5, [r4, #8]
 8004f78:	463e      	mov	r6, r7
 8004f7a:	42be      	cmp	r6, r7
 8004f7c:	d900      	bls.n	8004f80 <__ssputs_r+0x70>
 8004f7e:	463e      	mov	r6, r7
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	4632      	mov	r2, r6
 8004f84:	4641      	mov	r1, r8
 8004f86:	f000 faab 	bl	80054e0 <memmove>
 8004f8a:	68a3      	ldr	r3, [r4, #8]
 8004f8c:	1b9b      	subs	r3, r3, r6
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	4433      	add	r3, r6
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2000      	movs	r0, #0
 8004f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	f000 fac9 	bl	8005534 <_realloc_r>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d1e0      	bne.n	8004f6a <__ssputs_r+0x5a>
 8004fa8:	6921      	ldr	r1, [r4, #16]
 8004faa:	4650      	mov	r0, sl
 8004fac:	f7ff feb8 	bl	8004d20 <_free_r>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	f8ca 3000 	str.w	r3, [sl]
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	e7e9      	b.n	8004f98 <__ssputs_r+0x88>

08004fc4 <_svfiprintf_r>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	4698      	mov	r8, r3
 8004fca:	898b      	ldrh	r3, [r1, #12]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	b09d      	sub	sp, #116	; 0x74
 8004fd0:	4607      	mov	r7, r0
 8004fd2:	460d      	mov	r5, r1
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	d50e      	bpl.n	8004ff6 <_svfiprintf_r+0x32>
 8004fd8:	690b      	ldr	r3, [r1, #16]
 8004fda:	b963      	cbnz	r3, 8004ff6 <_svfiprintf_r+0x32>
 8004fdc:	2140      	movs	r1, #64	; 0x40
 8004fde:	f7ff ff0b 	bl	8004df8 <_malloc_r>
 8004fe2:	6028      	str	r0, [r5, #0]
 8004fe4:	6128      	str	r0, [r5, #16]
 8004fe6:	b920      	cbnz	r0, 8004ff2 <_svfiprintf_r+0x2e>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	e0d0      	b.n	8005194 <_svfiprintf_r+0x1d0>
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	616b      	str	r3, [r5, #20]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005000:	f8cd 800c 	str.w	r8, [sp, #12]
 8005004:	2330      	movs	r3, #48	; 0x30
 8005006:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051ac <_svfiprintf_r+0x1e8>
 800500a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800500e:	f04f 0901 	mov.w	r9, #1
 8005012:	4623      	mov	r3, r4
 8005014:	469a      	mov	sl, r3
 8005016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800501a:	b10a      	cbz	r2, 8005020 <_svfiprintf_r+0x5c>
 800501c:	2a25      	cmp	r2, #37	; 0x25
 800501e:	d1f9      	bne.n	8005014 <_svfiprintf_r+0x50>
 8005020:	ebba 0b04 	subs.w	fp, sl, r4
 8005024:	d00b      	beq.n	800503e <_svfiprintf_r+0x7a>
 8005026:	465b      	mov	r3, fp
 8005028:	4622      	mov	r2, r4
 800502a:	4629      	mov	r1, r5
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff ff6f 	bl	8004f10 <__ssputs_r>
 8005032:	3001      	adds	r0, #1
 8005034:	f000 80a9 	beq.w	800518a <_svfiprintf_r+0x1c6>
 8005038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800503a:	445a      	add	r2, fp
 800503c:	9209      	str	r2, [sp, #36]	; 0x24
 800503e:	f89a 3000 	ldrb.w	r3, [sl]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 80a1 	beq.w	800518a <_svfiprintf_r+0x1c6>
 8005048:	2300      	movs	r3, #0
 800504a:	f04f 32ff 	mov.w	r2, #4294967295
 800504e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005052:	f10a 0a01 	add.w	sl, sl, #1
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	9307      	str	r3, [sp, #28]
 800505a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800505e:	931a      	str	r3, [sp, #104]	; 0x68
 8005060:	4654      	mov	r4, sl
 8005062:	2205      	movs	r2, #5
 8005064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005068:	4850      	ldr	r0, [pc, #320]	; (80051ac <_svfiprintf_r+0x1e8>)
 800506a:	f7fb f8c1 	bl	80001f0 <memchr>
 800506e:	9a04      	ldr	r2, [sp, #16]
 8005070:	b9d8      	cbnz	r0, 80050aa <_svfiprintf_r+0xe6>
 8005072:	06d0      	lsls	r0, r2, #27
 8005074:	bf44      	itt	mi
 8005076:	2320      	movmi	r3, #32
 8005078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800507c:	0711      	lsls	r1, r2, #28
 800507e:	bf44      	itt	mi
 8005080:	232b      	movmi	r3, #43	; 0x2b
 8005082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005086:	f89a 3000 	ldrb.w	r3, [sl]
 800508a:	2b2a      	cmp	r3, #42	; 0x2a
 800508c:	d015      	beq.n	80050ba <_svfiprintf_r+0xf6>
 800508e:	9a07      	ldr	r2, [sp, #28]
 8005090:	4654      	mov	r4, sl
 8005092:	2000      	movs	r0, #0
 8005094:	f04f 0c0a 	mov.w	ip, #10
 8005098:	4621      	mov	r1, r4
 800509a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800509e:	3b30      	subs	r3, #48	; 0x30
 80050a0:	2b09      	cmp	r3, #9
 80050a2:	d94d      	bls.n	8005140 <_svfiprintf_r+0x17c>
 80050a4:	b1b0      	cbz	r0, 80050d4 <_svfiprintf_r+0x110>
 80050a6:	9207      	str	r2, [sp, #28]
 80050a8:	e014      	b.n	80050d4 <_svfiprintf_r+0x110>
 80050aa:	eba0 0308 	sub.w	r3, r0, r8
 80050ae:	fa09 f303 	lsl.w	r3, r9, r3
 80050b2:	4313      	orrs	r3, r2
 80050b4:	9304      	str	r3, [sp, #16]
 80050b6:	46a2      	mov	sl, r4
 80050b8:	e7d2      	b.n	8005060 <_svfiprintf_r+0x9c>
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	1d19      	adds	r1, r3, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	9103      	str	r1, [sp, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bfbb      	ittet	lt
 80050c6:	425b      	neglt	r3, r3
 80050c8:	f042 0202 	orrlt.w	r2, r2, #2
 80050cc:	9307      	strge	r3, [sp, #28]
 80050ce:	9307      	strlt	r3, [sp, #28]
 80050d0:	bfb8      	it	lt
 80050d2:	9204      	strlt	r2, [sp, #16]
 80050d4:	7823      	ldrb	r3, [r4, #0]
 80050d6:	2b2e      	cmp	r3, #46	; 0x2e
 80050d8:	d10c      	bne.n	80050f4 <_svfiprintf_r+0x130>
 80050da:	7863      	ldrb	r3, [r4, #1]
 80050dc:	2b2a      	cmp	r3, #42	; 0x2a
 80050de:	d134      	bne.n	800514a <_svfiprintf_r+0x186>
 80050e0:	9b03      	ldr	r3, [sp, #12]
 80050e2:	1d1a      	adds	r2, r3, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	9203      	str	r2, [sp, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bfb8      	it	lt
 80050ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80050f0:	3402      	adds	r4, #2
 80050f2:	9305      	str	r3, [sp, #20]
 80050f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051bc <_svfiprintf_r+0x1f8>
 80050f8:	7821      	ldrb	r1, [r4, #0]
 80050fa:	2203      	movs	r2, #3
 80050fc:	4650      	mov	r0, sl
 80050fe:	f7fb f877 	bl	80001f0 <memchr>
 8005102:	b138      	cbz	r0, 8005114 <_svfiprintf_r+0x150>
 8005104:	9b04      	ldr	r3, [sp, #16]
 8005106:	eba0 000a 	sub.w	r0, r0, sl
 800510a:	2240      	movs	r2, #64	; 0x40
 800510c:	4082      	lsls	r2, r0
 800510e:	4313      	orrs	r3, r2
 8005110:	3401      	adds	r4, #1
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005118:	4825      	ldr	r0, [pc, #148]	; (80051b0 <_svfiprintf_r+0x1ec>)
 800511a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800511e:	2206      	movs	r2, #6
 8005120:	f7fb f866 	bl	80001f0 <memchr>
 8005124:	2800      	cmp	r0, #0
 8005126:	d038      	beq.n	800519a <_svfiprintf_r+0x1d6>
 8005128:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <_svfiprintf_r+0x1f0>)
 800512a:	bb1b      	cbnz	r3, 8005174 <_svfiprintf_r+0x1b0>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	3307      	adds	r3, #7
 8005130:	f023 0307 	bic.w	r3, r3, #7
 8005134:	3308      	adds	r3, #8
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513a:	4433      	add	r3, r6
 800513c:	9309      	str	r3, [sp, #36]	; 0x24
 800513e:	e768      	b.n	8005012 <_svfiprintf_r+0x4e>
 8005140:	fb0c 3202 	mla	r2, ip, r2, r3
 8005144:	460c      	mov	r4, r1
 8005146:	2001      	movs	r0, #1
 8005148:	e7a6      	b.n	8005098 <_svfiprintf_r+0xd4>
 800514a:	2300      	movs	r3, #0
 800514c:	3401      	adds	r4, #1
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	4619      	mov	r1, r3
 8005152:	f04f 0c0a 	mov.w	ip, #10
 8005156:	4620      	mov	r0, r4
 8005158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515c:	3a30      	subs	r2, #48	; 0x30
 800515e:	2a09      	cmp	r2, #9
 8005160:	d903      	bls.n	800516a <_svfiprintf_r+0x1a6>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0c6      	beq.n	80050f4 <_svfiprintf_r+0x130>
 8005166:	9105      	str	r1, [sp, #20]
 8005168:	e7c4      	b.n	80050f4 <_svfiprintf_r+0x130>
 800516a:	fb0c 2101 	mla	r1, ip, r1, r2
 800516e:	4604      	mov	r4, r0
 8005170:	2301      	movs	r3, #1
 8005172:	e7f0      	b.n	8005156 <_svfiprintf_r+0x192>
 8005174:	ab03      	add	r3, sp, #12
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	462a      	mov	r2, r5
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <_svfiprintf_r+0x1f4>)
 800517c:	a904      	add	r1, sp, #16
 800517e:	4638      	mov	r0, r7
 8005180:	f3af 8000 	nop.w
 8005184:	1c42      	adds	r2, r0, #1
 8005186:	4606      	mov	r6, r0
 8005188:	d1d6      	bne.n	8005138 <_svfiprintf_r+0x174>
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	065b      	lsls	r3, r3, #25
 800518e:	f53f af2d 	bmi.w	8004fec <_svfiprintf_r+0x28>
 8005192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005194:	b01d      	add	sp, #116	; 0x74
 8005196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <_svfiprintf_r+0x1f4>)
 80051a2:	a904      	add	r1, sp, #16
 80051a4:	4638      	mov	r0, r7
 80051a6:	f000 f879 	bl	800529c <_printf_i>
 80051aa:	e7eb      	b.n	8005184 <_svfiprintf_r+0x1c0>
 80051ac:	080056a0 	.word	0x080056a0
 80051b0:	080056aa 	.word	0x080056aa
 80051b4:	00000000 	.word	0x00000000
 80051b8:	08004f11 	.word	0x08004f11
 80051bc:	080056a6 	.word	0x080056a6

080051c0 <_printf_common>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	4616      	mov	r6, r2
 80051c6:	4699      	mov	r9, r3
 80051c8:	688a      	ldr	r2, [r1, #8]
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	bfb8      	it	lt
 80051d4:	4613      	movlt	r3, r2
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051dc:	4607      	mov	r7, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	b10a      	cbz	r2, 80051e6 <_printf_common+0x26>
 80051e2:	3301      	adds	r3, #1
 80051e4:	6033      	str	r3, [r6, #0]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	0699      	lsls	r1, r3, #26
 80051ea:	bf42      	ittt	mi
 80051ec:	6833      	ldrmi	r3, [r6, #0]
 80051ee:	3302      	addmi	r3, #2
 80051f0:	6033      	strmi	r3, [r6, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d106      	bne.n	8005208 <_printf_common+0x48>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	6832      	ldr	r2, [r6, #0]
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	42ab      	cmp	r3, r5
 8005206:	dc26      	bgt.n	8005256 <_printf_common+0x96>
 8005208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800520c:	1e13      	subs	r3, r2, #0
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	bf18      	it	ne
 8005212:	2301      	movne	r3, #1
 8005214:	0692      	lsls	r2, r2, #26
 8005216:	d42b      	bmi.n	8005270 <_printf_common+0xb0>
 8005218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521c:	4649      	mov	r1, r9
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d01e      	beq.n	8005264 <_printf_common+0xa4>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	f003 0306 	and.w	r3, r3, #6
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf02      	ittt	eq
 8005232:	68e5      	ldreq	r5, [r4, #12]
 8005234:	6833      	ldreq	r3, [r6, #0]
 8005236:	1aed      	subeq	r5, r5, r3
 8005238:	68a3      	ldr	r3, [r4, #8]
 800523a:	bf0c      	ite	eq
 800523c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005240:	2500      	movne	r5, #0
 8005242:	4293      	cmp	r3, r2
 8005244:	bfc4      	itt	gt
 8005246:	1a9b      	subgt	r3, r3, r2
 8005248:	18ed      	addgt	r5, r5, r3
 800524a:	2600      	movs	r6, #0
 800524c:	341a      	adds	r4, #26
 800524e:	42b5      	cmp	r5, r6
 8005250:	d11a      	bne.n	8005288 <_printf_common+0xc8>
 8005252:	2000      	movs	r0, #0
 8005254:	e008      	b.n	8005268 <_printf_common+0xa8>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4649      	mov	r1, r9
 800525c:	4638      	mov	r0, r7
 800525e:	47c0      	blx	r8
 8005260:	3001      	adds	r0, #1
 8005262:	d103      	bne.n	800526c <_printf_common+0xac>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526c:	3501      	adds	r5, #1
 800526e:	e7c6      	b.n	80051fe <_printf_common+0x3e>
 8005270:	18e1      	adds	r1, r4, r3
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	2030      	movs	r0, #48	; 0x30
 8005276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800527a:	4422      	add	r2, r4
 800527c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005284:	3302      	adds	r3, #2
 8005286:	e7c7      	b.n	8005218 <_printf_common+0x58>
 8005288:	2301      	movs	r3, #1
 800528a:	4622      	mov	r2, r4
 800528c:	4649      	mov	r1, r9
 800528e:	4638      	mov	r0, r7
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d0e6      	beq.n	8005264 <_printf_common+0xa4>
 8005296:	3601      	adds	r6, #1
 8005298:	e7d9      	b.n	800524e <_printf_common+0x8e>
	...

0800529c <_printf_i>:
 800529c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	7e0f      	ldrb	r7, [r1, #24]
 80052a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a4:	2f78      	cmp	r7, #120	; 0x78
 80052a6:	4691      	mov	r9, r2
 80052a8:	4680      	mov	r8, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	469a      	mov	sl, r3
 80052ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052b2:	d807      	bhi.n	80052c4 <_printf_i+0x28>
 80052b4:	2f62      	cmp	r7, #98	; 0x62
 80052b6:	d80a      	bhi.n	80052ce <_printf_i+0x32>
 80052b8:	2f00      	cmp	r7, #0
 80052ba:	f000 80d4 	beq.w	8005466 <_printf_i+0x1ca>
 80052be:	2f58      	cmp	r7, #88	; 0x58
 80052c0:	f000 80c0 	beq.w	8005444 <_printf_i+0x1a8>
 80052c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052cc:	e03a      	b.n	8005344 <_printf_i+0xa8>
 80052ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052d2:	2b15      	cmp	r3, #21
 80052d4:	d8f6      	bhi.n	80052c4 <_printf_i+0x28>
 80052d6:	a101      	add	r1, pc, #4	; (adr r1, 80052dc <_printf_i+0x40>)
 80052d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005349 	.word	0x08005349
 80052e4:	080052c5 	.word	0x080052c5
 80052e8:	080052c5 	.word	0x080052c5
 80052ec:	080052c5 	.word	0x080052c5
 80052f0:	080052c5 	.word	0x080052c5
 80052f4:	08005349 	.word	0x08005349
 80052f8:	080052c5 	.word	0x080052c5
 80052fc:	080052c5 	.word	0x080052c5
 8005300:	080052c5 	.word	0x080052c5
 8005304:	080052c5 	.word	0x080052c5
 8005308:	0800544d 	.word	0x0800544d
 800530c:	08005375 	.word	0x08005375
 8005310:	08005407 	.word	0x08005407
 8005314:	080052c5 	.word	0x080052c5
 8005318:	080052c5 	.word	0x080052c5
 800531c:	0800546f 	.word	0x0800546f
 8005320:	080052c5 	.word	0x080052c5
 8005324:	08005375 	.word	0x08005375
 8005328:	080052c5 	.word	0x080052c5
 800532c:	080052c5 	.word	0x080052c5
 8005330:	0800540f 	.word	0x0800540f
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	602a      	str	r2, [r5, #0]
 800533c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005344:	2301      	movs	r3, #1
 8005346:	e09f      	b.n	8005488 <_printf_i+0x1ec>
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	0607      	lsls	r7, r0, #24
 800534e:	f103 0104 	add.w	r1, r3, #4
 8005352:	6029      	str	r1, [r5, #0]
 8005354:	d501      	bpl.n	800535a <_printf_i+0xbe>
 8005356:	681e      	ldr	r6, [r3, #0]
 8005358:	e003      	b.n	8005362 <_printf_i+0xc6>
 800535a:	0646      	lsls	r6, r0, #25
 800535c:	d5fb      	bpl.n	8005356 <_printf_i+0xba>
 800535e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005362:	2e00      	cmp	r6, #0
 8005364:	da03      	bge.n	800536e <_printf_i+0xd2>
 8005366:	232d      	movs	r3, #45	; 0x2d
 8005368:	4276      	negs	r6, r6
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536e:	485a      	ldr	r0, [pc, #360]	; (80054d8 <_printf_i+0x23c>)
 8005370:	230a      	movs	r3, #10
 8005372:	e012      	b.n	800539a <_printf_i+0xfe>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	0605      	lsls	r5, r0, #24
 800537e:	d501      	bpl.n	8005384 <_printf_i+0xe8>
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	e002      	b.n	800538a <_printf_i+0xee>
 8005384:	0641      	lsls	r1, r0, #25
 8005386:	d5fb      	bpl.n	8005380 <_printf_i+0xe4>
 8005388:	881e      	ldrh	r6, [r3, #0]
 800538a:	4853      	ldr	r0, [pc, #332]	; (80054d8 <_printf_i+0x23c>)
 800538c:	2f6f      	cmp	r7, #111	; 0x6f
 800538e:	bf0c      	ite	eq
 8005390:	2308      	moveq	r3, #8
 8005392:	230a      	movne	r3, #10
 8005394:	2100      	movs	r1, #0
 8005396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539a:	6865      	ldr	r5, [r4, #4]
 800539c:	60a5      	str	r5, [r4, #8]
 800539e:	2d00      	cmp	r5, #0
 80053a0:	bfa2      	ittt	ge
 80053a2:	6821      	ldrge	r1, [r4, #0]
 80053a4:	f021 0104 	bicge.w	r1, r1, #4
 80053a8:	6021      	strge	r1, [r4, #0]
 80053aa:	b90e      	cbnz	r6, 80053b0 <_printf_i+0x114>
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d04b      	beq.n	8005448 <_printf_i+0x1ac>
 80053b0:	4615      	mov	r5, r2
 80053b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ba:	5dc7      	ldrb	r7, [r0, r7]
 80053bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c0:	4637      	mov	r7, r6
 80053c2:	42bb      	cmp	r3, r7
 80053c4:	460e      	mov	r6, r1
 80053c6:	d9f4      	bls.n	80053b2 <_printf_i+0x116>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d10b      	bne.n	80053e4 <_printf_i+0x148>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	07de      	lsls	r6, r3, #31
 80053d0:	d508      	bpl.n	80053e4 <_printf_i+0x148>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	4299      	cmp	r1, r3
 80053d8:	bfde      	ittt	le
 80053da:	2330      	movle	r3, #48	; 0x30
 80053dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053e4:	1b52      	subs	r2, r2, r5
 80053e6:	6122      	str	r2, [r4, #16]
 80053e8:	f8cd a000 	str.w	sl, [sp]
 80053ec:	464b      	mov	r3, r9
 80053ee:	aa03      	add	r2, sp, #12
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fee4 	bl	80051c0 <_printf_common>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d14a      	bne.n	8005492 <_printf_i+0x1f6>
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	b004      	add	sp, #16
 8005402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	f043 0320 	orr.w	r3, r3, #32
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	4833      	ldr	r0, [pc, #204]	; (80054dc <_printf_i+0x240>)
 8005410:	2778      	movs	r7, #120	; 0x78
 8005412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	6829      	ldr	r1, [r5, #0]
 800541a:	061f      	lsls	r7, r3, #24
 800541c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005420:	d402      	bmi.n	8005428 <_printf_i+0x18c>
 8005422:	065f      	lsls	r7, r3, #25
 8005424:	bf48      	it	mi
 8005426:	b2b6      	uxthmi	r6, r6
 8005428:	07df      	lsls	r7, r3, #31
 800542a:	bf48      	it	mi
 800542c:	f043 0320 	orrmi.w	r3, r3, #32
 8005430:	6029      	str	r1, [r5, #0]
 8005432:	bf48      	it	mi
 8005434:	6023      	strmi	r3, [r4, #0]
 8005436:	b91e      	cbnz	r6, 8005440 <_printf_i+0x1a4>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	f023 0320 	bic.w	r3, r3, #32
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	2310      	movs	r3, #16
 8005442:	e7a7      	b.n	8005394 <_printf_i+0xf8>
 8005444:	4824      	ldr	r0, [pc, #144]	; (80054d8 <_printf_i+0x23c>)
 8005446:	e7e4      	b.n	8005412 <_printf_i+0x176>
 8005448:	4615      	mov	r5, r2
 800544a:	e7bd      	b.n	80053c8 <_printf_i+0x12c>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	6826      	ldr	r6, [r4, #0]
 8005450:	6961      	ldr	r1, [r4, #20]
 8005452:	1d18      	adds	r0, r3, #4
 8005454:	6028      	str	r0, [r5, #0]
 8005456:	0635      	lsls	r5, r6, #24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	d501      	bpl.n	8005460 <_printf_i+0x1c4>
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0x1ca>
 8005460:	0670      	lsls	r0, r6, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0x1c0>
 8005464:	8019      	strh	r1, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	4615      	mov	r5, r2
 800546c:	e7bc      	b.n	80053e8 <_printf_i+0x14c>
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	602a      	str	r2, [r5, #0]
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	2100      	movs	r1, #0
 800547a:	4628      	mov	r0, r5
 800547c:	f7fa feb8 	bl	80001f0 <memchr>
 8005480:	b108      	cbz	r0, 8005486 <_printf_i+0x1ea>
 8005482:	1b40      	subs	r0, r0, r5
 8005484:	6060      	str	r0, [r4, #4]
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	2300      	movs	r3, #0
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	e7aa      	b.n	80053e8 <_printf_i+0x14c>
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	462a      	mov	r2, r5
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d0ad      	beq.n	80053fc <_printf_i+0x160>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	079b      	lsls	r3, r3, #30
 80054a4:	d413      	bmi.n	80054ce <_printf_i+0x232>
 80054a6:	68e0      	ldr	r0, [r4, #12]
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	4298      	cmp	r0, r3
 80054ac:	bfb8      	it	lt
 80054ae:	4618      	movlt	r0, r3
 80054b0:	e7a6      	b.n	8005400 <_printf_i+0x164>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4632      	mov	r2, r6
 80054b6:	4649      	mov	r1, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	47d0      	blx	sl
 80054bc:	3001      	adds	r0, #1
 80054be:	d09d      	beq.n	80053fc <_printf_i+0x160>
 80054c0:	3501      	adds	r5, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	9903      	ldr	r1, [sp, #12]
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dcf2      	bgt.n	80054b2 <_printf_i+0x216>
 80054cc:	e7eb      	b.n	80054a6 <_printf_i+0x20a>
 80054ce:	2500      	movs	r5, #0
 80054d0:	f104 0619 	add.w	r6, r4, #25
 80054d4:	e7f5      	b.n	80054c2 <_printf_i+0x226>
 80054d6:	bf00      	nop
 80054d8:	080056b1 	.word	0x080056b1
 80054dc:	080056c2 	.word	0x080056c2

080054e0 <memmove>:
 80054e0:	4288      	cmp	r0, r1
 80054e2:	b510      	push	{r4, lr}
 80054e4:	eb01 0402 	add.w	r4, r1, r2
 80054e8:	d902      	bls.n	80054f0 <memmove+0x10>
 80054ea:	4284      	cmp	r4, r0
 80054ec:	4623      	mov	r3, r4
 80054ee:	d807      	bhi.n	8005500 <memmove+0x20>
 80054f0:	1e43      	subs	r3, r0, #1
 80054f2:	42a1      	cmp	r1, r4
 80054f4:	d008      	beq.n	8005508 <memmove+0x28>
 80054f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054fe:	e7f8      	b.n	80054f2 <memmove+0x12>
 8005500:	4402      	add	r2, r0
 8005502:	4601      	mov	r1, r0
 8005504:	428a      	cmp	r2, r1
 8005506:	d100      	bne.n	800550a <memmove+0x2a>
 8005508:	bd10      	pop	{r4, pc}
 800550a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800550e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005512:	e7f7      	b.n	8005504 <memmove+0x24>

08005514 <_sbrk_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d06      	ldr	r5, [pc, #24]	; (8005530 <_sbrk_r+0x1c>)
 8005518:	2300      	movs	r3, #0
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	f7fb fb92 	bl	8000c48 <_sbrk>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_sbrk_r+0x1a>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_sbrk_r+0x1a>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	20004b60 	.word	0x20004b60

08005534 <_realloc_r>:
 8005534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005538:	4680      	mov	r8, r0
 800553a:	4614      	mov	r4, r2
 800553c:	460e      	mov	r6, r1
 800553e:	b921      	cbnz	r1, 800554a <_realloc_r+0x16>
 8005540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	4611      	mov	r1, r2
 8005546:	f7ff bc57 	b.w	8004df8 <_malloc_r>
 800554a:	b92a      	cbnz	r2, 8005558 <_realloc_r+0x24>
 800554c:	f7ff fbe8 	bl	8004d20 <_free_r>
 8005550:	4625      	mov	r5, r4
 8005552:	4628      	mov	r0, r5
 8005554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005558:	f000 f81b 	bl	8005592 <_malloc_usable_size_r>
 800555c:	4284      	cmp	r4, r0
 800555e:	4607      	mov	r7, r0
 8005560:	d802      	bhi.n	8005568 <_realloc_r+0x34>
 8005562:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005566:	d812      	bhi.n	800558e <_realloc_r+0x5a>
 8005568:	4621      	mov	r1, r4
 800556a:	4640      	mov	r0, r8
 800556c:	f7ff fc44 	bl	8004df8 <_malloc_r>
 8005570:	4605      	mov	r5, r0
 8005572:	2800      	cmp	r0, #0
 8005574:	d0ed      	beq.n	8005552 <_realloc_r+0x1e>
 8005576:	42bc      	cmp	r4, r7
 8005578:	4622      	mov	r2, r4
 800557a:	4631      	mov	r1, r6
 800557c:	bf28      	it	cs
 800557e:	463a      	movcs	r2, r7
 8005580:	f7ff fbc0 	bl	8004d04 <memcpy>
 8005584:	4631      	mov	r1, r6
 8005586:	4640      	mov	r0, r8
 8005588:	f7ff fbca 	bl	8004d20 <_free_r>
 800558c:	e7e1      	b.n	8005552 <_realloc_r+0x1e>
 800558e:	4635      	mov	r5, r6
 8005590:	e7df      	b.n	8005552 <_realloc_r+0x1e>

08005592 <_malloc_usable_size_r>:
 8005592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005596:	1f18      	subs	r0, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	bfbc      	itt	lt
 800559c:	580b      	ldrlt	r3, [r1, r0]
 800559e:	18c0      	addlt	r0, r0, r3
 80055a0:	4770      	bx	lr
	...

080055a4 <_init>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	bf00      	nop
 80055a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055aa:	bc08      	pop	{r3}
 80055ac:	469e      	mov	lr, r3
 80055ae:	4770      	bx	lr

080055b0 <_fini>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr
