/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void adc_init()
{
	//__HAL_RCC_ADC_CLK_ENABLE();
	uint32_t* RCC_APB2ENR = (uint32_t*)(0x40023800 + 0x44);
	*RCC_APB2ENR |= (1 << 8);

	uint32_t* ADC_CCR = (uint32_t*)(0x40012000 + 0x300 + 0x04);
	*ADC_CCR |= (1 << 23);

	uint32_t* ADC_JSQR = (uint32_t*)(0x40012000 + 0x38);
	*ADC_JSQR &= ~(0b11 << 20); //1 conversion
	*ADC_JSQR |= (16 << 15);    //select channel 16 (temp sensor) to measure

	uint32_t* ADC_CR2 = (uint32_t*)(0x40012000 + 0x08);
	*ADC_CR2 |= (1 << 0);

	uint32_t* ADC_SMPR1 = (uint32_t*)(0x40012000 + 0x0C);
	*ADC_SMPR1 |= (0b111 << 18); //select sample time for channel 16 is 480 cycles
}

int adc_measure_vin()
{
	uint32_t* ADC_CR2 = (uint32_t*)(0x40012000 + 0x08);
	*ADC_CR2 |= (1 << 22); //start injected conversion

	uint32_t* ADC_SR = (uint32_t*)(0x40012000 + 0x00);
	while(((*ADC_SR >> 2) &1 ) !=1); //wait until injected conversion complete

	uint32_t* ADC_JDR1 = (uint32_t*)(0x40012000 + 0x3C);
	uint16_t Dr = *ADC_JDR1 & 0Xfff;
	float Vin = (Dr * 3000)/4095;
	return Vin;
}
uint8_t temperature;
uint8_t buf = 55;

int adc_get_temp()
{
	int Vsense = adc_measure_vin();
	int V25 = 760;
	float AVG_slope = 2.5;
	temperature = ((Vsense - V25)/AVG_slope) +25;
	return temperature;
}
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void UART_init()
{
    __HAL_RCC_GPIOB_CLK_ENABLE();
    uint32_t* GPIOB_MODER = (uint32_t*)(0x40020400 + 0x00);
    uint32_t* GPIOB_AFRL = (uint32_t*)(0x40020400 + 0x20);

    *GPIOB_MODER &= ~((0b11 << 12) | (0b11 << 14));
    *GPIOB_MODER |= ((0b10 << 12) | (0b10 << 14));
    *GPIOB_AFRL |= (7 << 24) | (7 << 28);

    //baudrate = 9600 ---> use formular to resolve it.
    //parity: even
    //data len: 8 bit
    __HAL_RCC_USART1_CLK_ENABLE();
    uint32_t* USART1_BRR = (uint32_t*)(0x40011000 + 0x08);
    uint32_t* USART1_CR1 = (uint32_t*)(0x40011000 + 0x0C);

    *USART1_BRR |= (104 << 4) | (3 << 0); // set baud rate = 9600
    *USART1_CR1 |= (1 << 12) | (1 << 10);
    *USART1_CR1 &= ~(1 << 9);
    *USART1_CR1 |= (1 << 13)|(1 << 3)|(1 << 2);// Enable UART, Tx vÃ  Rx
}

void UART_send_1_byte(char data)
{
    uint32_t* USART1_DR  = (uint32_t*)(0x40011000 + 0x04);
    uint32_t* USART1_SR  = (uint32_t*)(0x40011000 + 0x00);

    while(((*USART1_SR >> 7) &1) !=1); //7: Transmit data register empty
    *USART1_DR = data;
    while(((*USART1_SR >> 6) &1) !=1); //6: Transmission complete
}

void UART_send_string(char* str)
{
    int trl_len = strlen(str);
    for(int i = 0; i < trl_len; i++)
    {
        UART_send_1_byte(str[i]);
    }
}

char UART_recieve_data()
{
	uint32_t* USART1_DR  = (uint32_t*)(0x40011000 + 0x04);
	uint32_t* USART1_SR  = (uint32_t*)(0x40011000 + 0x00);

	while(((*USART1_SR >> 5) &1) !=1);
	uint8_t data = *USART1_DR;

	return data;
}

void printlog(char* format, ...)
{
	char buf[1024] = {0};
	char buf_len =0;
	va_list ap;
	va_start (ap, format);
	vsprint(buf, format, ap);
	va_end(ap);
	buf_len = strlen(buf);
	for(int i=0; i < buf_len; i++)
	{
		UART_send_1_byte(buf[i]);
	}
}

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for Blinking_LED */
osThreadId_t Blinking_LEDHandle;
const osThreadAttr_t Blinking_LED_attributes = {
  .name = "Blinking_LED",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for UART */
osThreadId_t UARTHandle;
const osThreadAttr_t UART_attributes = {
  .name = "UART",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void *argument);
void Function1(void *argument);
void Function2(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	adc_init();
	adc_measure_vin();
	adc_get_temp();
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of Blinking_LED */
  Blinking_LEDHandle = osThreadNew(Function1, NULL, &Blinking_LED_attributes);

  /* creation of UART */
  UARTHandle = osThreadNew(Function2, NULL, &UART_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_Function1 */
/**
* @brief Function implementing the Blinking_LED thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Function1 */
void Function1(void *argument)
{
  /* USER CODE BEGIN Function1 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
    osDelay(1000);
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
    osDelay(1000);
  }
  /* USER CODE END Function1 */
}

/* USER CODE BEGIN Header_Function2 */
/**
* @brief Function implementing the UART thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Function2 */
void Function2(void *argument)
{
  /* USER CODE BEGIN Function2 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout);
	//HAL_UART_Transmit(&huart1, temperature, sizeof(temperature), 0xffff);
	//HAL_UART_Transmit_IT(&huart1, temperature, sizeof(temperature));
    osDelay(3000);
    UART_send_1_byte("sdkd")
    adc_measure_vin();

    if(temperature >=30)
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
    	osDelay(50);
    }

    if(temperature >=25 && temperature <29)
        {
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
        	osDelay(50);
        }

    if(temperature <25)
        {
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
        	osDelay(50);
        }
  }
  /* USER CODE END Function2 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
